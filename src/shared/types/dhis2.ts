/* GENERATED BY https://github.com/Birkbjo/dhis2-open-api-ts */

export type Access = {
    data: AccessData
    delete: boolean
    externalize: boolean
    manage: boolean
    read: boolean
    update: boolean
    write: boolean
}

export type AccessData = {
    read: boolean
    write: boolean
}

export type AddOperation = {
    op: string
    path: string
    value: Record<string, any>
}

export type AggregateDataExchange = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    source: Source
    target: Target
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type AggregateDataExchangeJobParameters = {
    dataExchangeIds: Array<string>
}

export type AnalyticsJobParameters = {
    lastYears: number
    skipPrograms: Array<string>
    skipResourceTables: boolean
    skipTableTypes: Array<
        | "DATA_VALUE"
        | "COMPLETENESS"
        | "COMPLETENESS_TARGET"
        | "ORG_UNIT_TARGET"
        | "EVENT"
        | "ENROLLMENT"
        | "OWNERSHIP"
        | "VALIDATION_RESULT"
    >
}

export type AnalyticsTableHook = {
    access: Access
    analyticsTableType: AnalyticsTableHook.analyticsTableType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    phase: AnalyticsTableHook.phase
    publicAccess: string
    resourceTableType: AnalyticsTableHook.resourceTableType
    sharing: Sharing
    sql: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace AnalyticsTableHook {
    export enum analyticsTableType {
        DATA_VALUE = "DATA_VALUE",
        COMPLETENESS = "COMPLETENESS",
        COMPLETENESS_TARGET = "COMPLETENESS_TARGET",
        ORG_UNIT_TARGET = "ORG_UNIT_TARGET",
        EVENT = "EVENT",
        ENROLLMENT = "ENROLLMENT",
        OWNERSHIP = "OWNERSHIP",
        VALIDATION_RESULT = "VALIDATION_RESULT",
    }

    export enum phase {
        RESOURCE_TABLE_POPULATED = "RESOURCE_TABLE_POPULATED",
        ANALYTICS_TABLE_POPULATED = "ANALYTICS_TABLE_POPULATED",
    }

    export enum resourceTableType {
        ORG_UNIT_STRUCTURE = "ORG_UNIT_STRUCTURE",
        DATA_SET_ORG_UNIT_CATEGORY = "DATA_SET_ORG_UNIT_CATEGORY",
        CATEGORY_OPTION_COMBO_NAME = "CATEGORY_OPTION_COMBO_NAME",
        DATA_ELEMENT_GROUP_SET_STRUCTURE = "DATA_ELEMENT_GROUP_SET_STRUCTURE",
        INDICATOR_GROUP_SET_STRUCTURE = "INDICATOR_GROUP_SET_STRUCTURE",
        ORG_UNIT_GROUP_SET_STRUCTURE = "ORG_UNIT_GROUP_SET_STRUCTURE",
        CATEGORY_STRUCTURE = "CATEGORY_STRUCTURE",
        DATA_ELEMENT_STRUCTURE = "DATA_ELEMENT_STRUCTURE",
        PERIOD_STRUCTURE = "PERIOD_STRUCTURE",
        DATE_PERIOD_STRUCTURE = "DATE_PERIOD_STRUCTURE",
        DATA_ELEMENT_CATEGORY_OPTION_COMBO = "DATA_ELEMENT_CATEGORY_OPTION_COMBO",
        DATA_APPROVAL_REMAP_LEVEL = "DATA_APPROVAL_REMAP_LEVEL",
        DATA_APPROVAL_MIN_LEVEL = "DATA_APPROVAL_MIN_LEVEL",
    }
}

export type Api = {
    accessToken: string
    password: string
    url: string
    username: string
}

export type ApiToken = {
    access: Access
    attributeValues: Array<AttributeValue>
    attributes: Array<IpAllowedList | RefererAllowedList | MethodAllowedList>
    code: string
    created: string
    createdBy: User
    displayName: string
    expire: number
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    type: ApiToken.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    version: number
}

export namespace ApiToken {
    export enum type {
        PERSONAL_ACCESS_TOKEN = "PERSONAL_ACCESS_TOKEN",
    }
}

export type ApiTokenAuth = {
    token: string
    type: string
}

export type App = {
    activities: AppActivities
    appState: App.appState
    appStorageSource: App.appStorageSource
    appType: App.appType
    app_hub_id: string
    authorities: Array<string>
    baseUrl: string
    bundled: boolean
    core_app: boolean
    default_locale: string
    description: string
    developer: AppDeveloper
    folderName: string
    icons: AppIcons
    installs_allowed_from: Array<string>
    key: string
    launchUrl: string
    launch_path: string
    name: string
    pluginLaunchUrl: string
    plugin_launch_path: string
    plugin_type: string
    settings: AppSettings
    short_name: string
    version: string
}

export namespace App {
    export enum appState {
        OK = "OK",
        INVALID_BUNDLED_APP_OVERRIDE = "INVALID_BUNDLED_APP_OVERRIDE",
        INVALID_CORE_APP = "INVALID_CORE_APP",
        NAMESPACE_TAKEN = "NAMESPACE_TAKEN",
        INVALID_ZIP_FORMAT = "INVALID_ZIP_FORMAT",
        MISSING_MANIFEST = "MISSING_MANIFEST",
        INVALID_MANIFEST_JSON = "INVALID_MANIFEST_JSON",
        INSTALLATION_FAILED = "INSTALLATION_FAILED",
        NOT_FOUND = "NOT_FOUND",
        MISSING_SYSTEM_BASE_URL = "MISSING_SYSTEM_BASE_URL",
        APPROVED = "APPROVED",
        PENDING = "PENDING",
        NOT_APPROVED = "NOT_APPROVED",
        DELETION_IN_PROGRESS = "DELETION_IN_PROGRESS",
    }

    export enum appStorageSource {
        LOCAL = "LOCAL",
        JCLOUDS = "JCLOUDS",
    }

    export enum appType {
        APP = "APP",
        RESOURCE = "RESOURCE",
        DASHBOARD_WIDGET = "DASHBOARD_WIDGET",
        TRACKER_DASHBOARD_WIDGET = "TRACKER_DASHBOARD_WIDGET",
    }
}

export type AppActivities = {
    dhis: AppDhis
}

export type AppDeveloper = {
    company: string
    email: string
    name: string
    url: string
}

export type AppDhis = {
    href: string
    namespace: string
}

export type AppIcons = {
    "16": string
    "48": string
    "128": string
}

export type ApprovalDto = {
    aoc: UID_CategoryOptionCombo
    ou: UID_OrganisationUnit
}

export type ApprovalsDto = {
    approvals: Array<ApprovalDto>
    ds: Array<UID_DataSet>
    pe: Array<string>
    wf: Array<UID_DataApprovalWorkflow>
}

export type ApprovalStatusDto = {
    aoc: UID_CategoryOptionCombo
    level: string
    ou: UID_OrganisationUnit
    ouName: string
    pe: string
    permissions: DataApprovalPermissions
    state: ApprovalStatusDto.state
    wf: UID_DataApprovalWorkflow
}

export namespace ApprovalStatusDto {
    export enum state {
        UNAPPROVABLE = "UNAPPROVABLE",
        UNAPPROVED_ABOVE = "UNAPPROVED_ABOVE",
        UNAPPROVED_WAITING = "UNAPPROVED_WAITING",
        UNAPPROVED_READY = "UNAPPROVED_READY",
        APPROVED_ABOVE = "APPROVED_ABOVE",
        APPROVED_HERE = "APPROVED_HERE",
        ACCEPTED_HERE = "ACCEPTED_HERE",
    }
}

export type AppSettings = {
    dashboardWidget: DashboardWidgetAppSettings
}

export type AppVersion = {
    created: string
    demoUrl: string
    downloadUrl: string
    id: string
    lastUpdated: string
    maxDhisVersion: string
    minDhisVersion: string
    version: string
}

export type Attribute = {
    access: Access
    attributeValues: Array<AttributeValue>
    categoryAttribute: boolean
    categoryOptionAttribute: boolean
    categoryOptionComboAttribute: boolean
    categoryOptionGroupAttribute: boolean
    categoryOptionGroupSetAttribute: boolean
    code: string
    constantAttribute: boolean
    created: string
    createdBy: User
    dataElementAttribute: boolean
    dataElementGroupAttribute: boolean
    dataElementGroupSetAttribute: boolean
    dataSetAttribute: boolean
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    documentAttribute: boolean
    eventChartAttribute: boolean
    eventReportAttribute: boolean
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    indicatorAttribute: boolean
    indicatorGroupAttribute: boolean
    lastUpdated: string
    lastUpdatedBy: User
    legendSetAttribute: boolean
    mandatory: boolean
    mapAttribute: boolean
    name: string
    objectTypes: Array<string>
    optionAttribute: boolean
    optionSet: OptionSet
    optionSetAttribute: boolean
    organisationUnitAttribute: boolean
    organisationUnitGroupAttribute: boolean
    organisationUnitGroupSetAttribute: boolean
    programAttribute: boolean
    programIndicatorAttribute: boolean
    programStageAttribute: boolean
    publicAccess: string
    relationshipTypeAttribute: boolean
    sectionAttribute: boolean
    sharing: Sharing
    shortName: string
    sortOrder: number
    sqlViewAttribute: boolean
    trackedEntityAttributeAttribute: boolean
    trackedEntityTypeAttribute: boolean
    translations: Array<Translation>
    unique: boolean
    user: User
    userAccesses: Array<UserAccess>
    userAttribute: boolean
    userGroupAccesses: Array<UserGroupAccess>
    userGroupAttribute: boolean
    validationRuleAttribute: boolean
    validationRuleGroupAttribute: boolean
    valueType: Attribute.valueType
    visualizationAttribute: boolean
}

export namespace Attribute {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type AttributeValue = {
    attribute: Attribute
    value: string
}

export type AttributeValueFilter = {
    attribute: string
    dateFilter: DateFilterPeriod
    eq: string
    ew: string
    ge: string
    gt: string
    in: Array<string>
    le: string
    like: string
    lt: string
    sw: string
}

export type AvailabilityStatus = {
    available: boolean
    message: string
    statusCode: number
    statusPhrase: string
}

export type Axis = {
    axis: number
    dimensionalItem: string
}

export type AxisV2 = {
    baseLine: Line
    decimals: number
    index: number
    label: StyledObject
    maxValue: number
    minValue: number
    steps: number
    targetLine: Line
    title: StyledObject
    type: AxisV2.type
}

export namespace AxisV2 {
    export enum type {
        DOMAIN = "DOMAIN",
        RANGE = "RANGE",
    }
}

export type BaseIdentifiableObject = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type BatchResponseStatus = {
    summaries: Array<OutboundMessageResponseSummary>
}

export type Body = {
    enrollments: Array<WebapiControllerTrackerView_Enrollment>
    events: Array<WebapiControllerTrackerView_Event>
    relationships: Array<WebapiControllerTrackerView_Relationship>
    trackedEntities: Array<WebapiControllerTrackerView_TrackedEntity>
}

export type BulkJsonPatch = {
    patch: JsonPatch
    targetIds: Record<string, Array<string>>
}

export type BulkSmsGatewayConfig = {
    id: string
    isDefault: boolean
    maxSmsLength: string
    name: string
    password: string
    sendUrlParameters: boolean
    uid: string
    urlTemplate: string
    username: string
}

export type CascadeSharingReport = {
    countUpdatedDashboardItems: number
    errorReports: Array<ErrorReport>
    updateObjects: Record<string, Array<IdObject>>
}

export type Category = {
    access: Access
    aggregationType: Category.aggregationType
    allItems: boolean
    attributeValues: Array<AttributeValue>
    categoryCombos: Array<CategoryCombo>
    categoryOptions: Array<CategoryOption>
    code: string
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: Category.dataDimensionType
    description: string
    dimension: string
    dimensionItemKeywords: DimensionItemKeywords
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    items: Array<Ref_DimensionalItemObject>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    name: string
    optionSet: OptionSet
    programStage: ProgramStage
    publicAccess: string
    repetition: EventRepetition
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: Category.valueType
}

export namespace Category {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type CategoryCombo = {
    access: Access
    attributeValues: Array<AttributeValue>
    categories: Array<Category>
    categoryOptionCombos: Array<CategoryOptionCombo>
    code: string
    created: string
    createdBy: User
    dataDimensionType: CategoryCombo.dataDimensionType
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    isDefault: boolean
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    skipTotal: boolean
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace CategoryCombo {
    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }
}

export type CategoryDimension = {
    category: Category
    categoryOptions: Array<CategoryOption>
}

export type CategoryOption = {
    access: Access
    aggregationType: CategoryOption.aggregationType
    attributeValues: Array<AttributeValue>
    categories: Array<Category>
    categoryOptionCombos: Array<CategoryOptionCombo>
    categoryOptionGroups: Array<CategoryOptionGroup>
    code: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    endDate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    isDefault: boolean
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    organisationUnits: Array<OrganisationUnit>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    startDate: string
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace CategoryOption {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }
}

export type CategoryOptionCombo = {
    access: Access
    aggregationType: CategoryOptionCombo.aggregationType
    attributeValues: Array<AttributeValue>
    categoryCombo: CategoryCombo
    categoryOptions: Array<CategoryOption>
    code: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    dimensionItemType: CategoryOptionCombo.dimensionItemType
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    ignoreApproval: boolean
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace CategoryOptionCombo {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dimensionItemType {
        DATA_ELEMENT = "DATA_ELEMENT",
        DATA_ELEMENT_OPERAND = "DATA_ELEMENT_OPERAND",
        INDICATOR = "INDICATOR",
        REPORTING_RATE = "REPORTING_RATE",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        PERIOD = "PERIOD",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        CATEGORY_OPTION = "CATEGORY_OPTION",
        OPTION_GROUP = "OPTION_GROUP",
        DATA_ELEMENT_GROUP = "DATA_ELEMENT_GROUP",
        ORGANISATION_UNIT_GROUP = "ORGANISATION_UNIT_GROUP",
        CATEGORY_OPTION_GROUP = "CATEGORY_OPTION_GROUP",
        EXPRESSION_DIMENSION_ITEM = "EXPRESSION_DIMENSION_ITEM",
    }
}

export type CategoryOptionGroup = {
    access: Access
    aggregationType: CategoryOptionGroup.aggregationType
    attributeValues: Array<AttributeValue>
    categoryOptions: Array<CategoryOption>
    code: string
    created: string
    createdBy: User
    dataDimensionType: CategoryOptionGroup.dataDimensionType
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    groupSets: Array<CategoryOptionGroupSet>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace CategoryOptionGroup {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }
}

export type CategoryOptionGroupSet = {
    access: Access
    aggregationType: CategoryOptionGroupSet.aggregationType
    allItems: boolean
    attributeValues: Array<AttributeValue>
    categoryOptionGroups: Array<CategoryOptionGroup>
    code: string
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: CategoryOptionGroupSet.dataDimensionType
    description: string
    dimension: string
    dimensionItemKeywords: DimensionItemKeywords
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    items: Array<Ref_DimensionalItemObject>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    name: string
    optionSet: OptionSet
    programStage: ProgramStage
    publicAccess: string
    repetition: EventRepetition
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: CategoryOptionGroupSet.valueType
}

export namespace CategoryOptionGroupSet {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type CategoryOptionGroupSetDimension = {
    categoryOptionGroupSet: CategoryOptionGroupSet
    categoryOptionGroups: Array<CategoryOptionGroup>
}

export type ClickatellGatewayConfig = {
    authToken: string
    id: string
    isDefault: boolean
    maxSmsLength: string
    name: string
    password: string
    sendUrlParameters: boolean
    uid: string
    urlTemplate: string
    username: string
}

export type CodeList = {
    codes: Array<string>
}

export type Column = {
    index: number
    span: number
}

export type CompleteStatusDto = {
    complete: boolean
    created: string
    createdBy: string
    lastUpdated: string
    lastUpdatedBy: string
}

export type Config = {
    inclusionStrategy: Config.inclusionStrategy
    properties: Record<string, Record<string, any>>
}

export namespace Config {
    export enum inclusionStrategy {
        ALWAYS = "ALWAYS",
        NON_NULL = "NON_NULL",
        NON_EMPTY = "NON_EMPTY",
    }
}

export type Configuration = {
    corsWhitelist: Array<string>
    facilityOrgUnitGroupSet: OrganisationUnitGroupSet
    facilityOrgUnitLevel: OrganisationUnitLevel
    feedbackRecipients: UserGroup
    infrastructuralDataElements: DataElementGroup
    infrastructuralIndicators: IndicatorGroup
    infrastructuralPeriodType: Configuration.infrastructuralPeriodType
    offlineOrganisationUnitLevel: OrganisationUnitLevel
    selfRegistrationOrgUnit: OrganisationUnit
    selfRegistrationRole: UserRole
    systemId: string
    systemUpdateNotificationRecipients: UserGroup
}

export namespace Configuration {
    export enum infrastructuralPeriodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }
}

export type ConsoleTarget = {
    clientId: string
    type: string
}

export type Constant = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    value: number
}

export type ContinuousAnalyticsJobParameters = {
    fullUpdateHourOfDay: number
    lastYears: number
    skipTableTypes: Array<
        | "DATA_VALUE"
        | "COMPLETENESS"
        | "COMPLETENESS_TARGET"
        | "ORG_UNIT_TARGET"
        | "EVENT"
        | "ENROLLMENT"
        | "OWNERSHIP"
        | "VALIDATION_RESULT"
    >
}

export type CustomDataEntryFormDto = {
    dataSetId: string
    displayDensity: CustomDataEntryFormDto.displayDensity
    form: string
    id: string
    version: number
}

export namespace CustomDataEntryFormDto {
    export enum displayDensity {
        COMFORTABLE = "COMFORTABLE",
        NORMAL = "NORMAL",
        COMPACT = "COMPACT",
        NONE = "NONE",
    }
}

export type Dashboard = {
    access: Access
    allowedFilters: Array<string>
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dashboardItems: Array<DashboardItem>
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    itemConfig: ItemConfig
    itemCount: number
    lastUpdated: string
    lastUpdatedBy: User
    layout: Layout
    name: string
    publicAccess: string
    restrictFilters: boolean
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type DashboardItem = {
    access: Access
    appKey: string
    attributeValues: Array<AttributeValue>
    code: string
    contentCount: number
    created: string
    createdBy: User
    displayName: string
    eventChart: Ref_EventChart
    eventReport: Ref_EventReport
    eventVisualization: EventVisualization
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    height: number
    href: string
    id: string
    interpretationCount: number
    interpretationLikeCount: number
    lastUpdated: string
    lastUpdatedBy: User
    map: Map
    messages: boolean
    name: string
    publicAccess: string
    reports: Array<Report>
    resources: Array<Document>
    shape: DashboardItem.shape
    sharing: Sharing
    text: string
    translations: Array<Translation>
    type: DashboardItem.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    users: Array<User>
    visualization: Visualization
    width: number
    x: number
    y: number
}

export namespace DashboardItem {
    export enum shape {
        NORMAL = "NORMAL",
        DOUBLE_WIDTH = "DOUBLE_WIDTH",
        FULL_WIDTH = "FULL_WIDTH",
    }

    export enum type {
        VISUALIZATION = "VISUALIZATION",
        EVENT_VISUALIZATION = "EVENT_VISUALIZATION",
        EVENT_CHART = "EVENT_CHART",
        MAP = "MAP",
        EVENT_REPORT = "EVENT_REPORT",
        USERS = "USERS",
        REPORTS = "REPORTS",
        RESOURCES = "RESOURCES",
        TEXT = "TEXT",
        MESSAGES = "MESSAGES",
        APP = "APP",
    }
}

export type DashboardSearchResult = {
    appCount: number
    apps: Array<App>
    eventChartCount: number
    eventCharts: Array<EventVisualization>
    eventReportCount: number
    eventReports: Array<EventVisualization>
    eventVisualizationCount: number
    eventVisualizations: Array<Ref_SimpleEventVisualizationView>
    mapCount: number
    maps: Array<Map>
    reportCount: number
    reports: Array<Report>
    resourceCount: number
    resources: Array<Document>
    searchCount: number
    userCount: number
    users: Array<User>
    visualizationCount: number
    visualizations: Array<Ref_SimpleVisualizationView>
}

export type DashboardWidgetAppSettings = {
    hideTitle: boolean
}

export type DataAnalysisParams = {
    ds: Array<string>
    endDate: string
    ou: string
    standardDeviation: number
    startDate: string
}

export type DataApprovalLevel = {
    access: Access
    attributeValues: Array<AttributeValue>
    categoryOptionGroupSet: CategoryOptionGroupSet
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    level: number
    name: string
    orgUnitLevel: number
    orgUnitLevelName: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type DataApprovalPermissions = {
    acceptedAt: string
    acceptedBy: string
    approvedAt: string
    approvedBy: string
    mayAccept: boolean
    mayApprove: boolean
    mayReadData: boolean
    mayUnaccept: boolean
    mayUnapprove: boolean
    state: string
}

export type DataApprovalWorkflow = {
    access: Access
    attributeValues: Array<AttributeValue>
    categoryCombo: CategoryCombo
    code: string
    created: string
    createdBy: User
    dataApprovalLevels: Array<DataApprovalLevel>
    dataSets: Array<DataSet>
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    periodType: DataApprovalWorkflow.periodType
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace DataApprovalWorkflow {
    export enum periodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }
}

export type DatabaseInfo = {
    databaseVersion: string
    name: string
    spatialSupport: boolean
    url: string
    user: string
}

export type DataDimensionItem = {
    dataDimensionItemType: DataDimensionItem.dataDimensionItemType
    dataElement: DataElement
    dataElementOperand: Ref_DataElementOperand
    expressionDimensionItem: ExpressionDimensionItem
    indicator: Indicator
    programAttribute: Ref_ProgramTrackedEntityAttributeDimensionItem
    programDataElement: Ref_ProgramDataElementDimensionItem
    programIndicator: ProgramIndicator
    reportingRate: Ref_ReportingRate
}

export namespace DataDimensionItem {
    export enum dataDimensionItemType {
        INDICATOR = "INDICATOR",
        DATA_ELEMENT = "DATA_ELEMENT",
        DATA_ELEMENT_OPERAND = "DATA_ELEMENT_OPERAND",
        REPORTING_RATE = "REPORTING_RATE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        EXPRESSION_DIMENSION_ITEM = "EXPRESSION_DIMENSION_ITEM",
        VALIDATION_RULE = "VALIDATION_RULE",
    }
}

export type DataElement = {
    access: Access
    aggregationLevels: Array<number>
    aggregationType: DataElement.aggregationType
    attributeValues: Array<AttributeValue>
    categoryCombo: CategoryCombo
    code: string
    commentOptionSet: OptionSet
    created: string
    createdBy: User
    dataElementGroups: Array<DataElementGroup>
    dataSetElements: Array<DataSetElement>
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    domainType: DataElement.domainType
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    fieldMask: string
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    optionSet: OptionSet
    optionSetValue: boolean
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    style: ObjectStyle
    translations: Array<Translation>
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: DataElement.valueType
    valueTypeOptions: FileTypeValueOptions
    zeroIsSignificant: boolean
}

export namespace DataElement {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum domainType {
        AGGREGATE = "AGGREGATE",
        TRACKER = "TRACKER",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type DataElementGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataElements: Array<DataElement>
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    groupSets: Array<DataElementGroupSet>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type DataElementGroupSet = {
    access: Access
    aggregationType: DataElementGroupSet.aggregationType
    allItems: boolean
    attributeValues: Array<AttributeValue>
    code: string
    compulsory: boolean
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: DataElementGroupSet.dataDimensionType
    dataElementGroups: Array<DataElementGroup>
    description: string
    dimension: string
    dimensionItemKeywords: DimensionItemKeywords
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    items: Array<Ref_DimensionalItemObject>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    name: string
    optionSet: OptionSet
    programStage: ProgramStage
    publicAccess: string
    repetition: EventRepetition
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: DataElementGroupSet.valueType
}

export namespace DataElementGroupSet {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type DataElementGroupSetDimension = {
    dataElementGroupSet: DataElementGroupSet
    dataElementGroups: Array<DataElementGroup>
}

export type DataEntryForm = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    format: number
    href: string
    htmlCode: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    style: DataEntryForm.style
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace DataEntryForm {
    export enum style {
        COMFORTABLE = "COMFORTABLE",
        NORMAL = "NORMAL",
        COMPACT = "COMPACT",
        NONE = "NONE",
    }
}

export type DataInputPeriod = {
    closingDate: string
    openingDate: string
    period: string
}

export type DataIntegrityCheck = {
    code: string
    description: string
    displayName: string
    introduction: string
    isSlow: boolean
    issuesIdType: string
    name: string
    recommendation: string
    section: string
    severity: DataIntegrityCheck.severity
}

export namespace DataIntegrityCheck {
    export enum severity {
        INFO = "INFO",
        WARNING = "WARNING",
        SEVERE = "SEVERE",
        CRITICAL = "CRITICAL",
    }
}

export type DataIntegrityDetails = {
    error: string
    finishedTime: string
    issues: Array<DataIntegrityIssue>
    startTime: string
}

export type DataIntegrityIssue = {
    comment: string
    id: string
    name: string
    refs: Array<string>
}

export type DataIntegrityJobParameters = {
    checks: Array<string>
    type: DataIntegrityJobParameters.type
}

export namespace DataIntegrityJobParameters {
    export enum type {
        REPORT = "REPORT",
        SUMMARY = "SUMMARY",
        DETAILS = "DETAILS",
    }
}

export type DataIntegritySummary = {
    count: number
    error: string
    finishedTime: string
    percentage: number
    startTime: string
}

export type DataSet = {
    access: Access
    aggregationType: DataSet.aggregationType
    attributeValues: Array<AttributeValue>
    categoryCombo: CategoryCombo
    code: string
    compulsoryDataElementOperands: Array<Ref_DataElementOperand>
    compulsoryFieldsCompleteOnly: boolean
    created: string
    createdBy: User
    dataElementDecoration: boolean
    dataEntryForm: DataEntryForm
    dataInputPeriods: Array<DataInputPeriod>
    dataSetElements: Array<DataSetElement>
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    expiryDays: number
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    fieldCombinationRequired: boolean
    formName: string
    formType: DataSet.formType
    href: string
    id: string
    indicators: Array<Indicator>
    interpretations: Array<Interpretation>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    mobile: boolean
    name: string
    noValueRequiresComment: boolean
    notificationRecipients: UserGroup
    notifyCompletingUser: boolean
    openFuturePeriods: number
    openPeriodsAfterCoEndDate: number
    organisationUnits: Array<OrganisationUnit>
    periodType: DataSet.periodType
    publicAccess: string
    queryMods: QueryModifiers
    renderAsTabs: boolean
    renderHorizontally: boolean
    sections: Array<Section>
    sharing: Sharing
    shortName: string
    skipOffline: boolean
    style: ObjectStyle
    timelyDays: number
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    validCompleteOnly: boolean
    version: number
    workflow: DataApprovalWorkflow
}

export namespace DataSet {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum formType {
        DEFAULT = "DEFAULT",
        CUSTOM = "CUSTOM",
        SECTION = "SECTION",
        SECTION_MULTIORG = "SECTION_MULTIORG",
    }

    export enum periodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }
}

export type DataSetCompletionDto = {
    attribute: DataValueCategoryDto
    completed: boolean
    dataSet: string
    orgUnit: string
    period: string
}

export type DataSetElement = {
    categoryCombo: CategoryCombo
    dataElement: DataElement
    dataSet: DataSet
}

export type DataSetNotificationTemplate = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataSetNotificationTrigger: DataSetNotificationTemplate.dataSetNotificationTrigger
    dataSets: Array<DataSet>
    deliveryChannels: Array<"SMS" | "EMAIL" | "HTTP">
    displayMessageTemplate: string
    displayName: string
    displaySubjectTemplate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    messageTemplate: string
    name: string
    notificationRecipient: DataSetNotificationTemplate.notificationRecipient
    notifyParentOrganisationUnitOnly: boolean
    notifyUsersInHierarchyOnly: boolean
    publicAccess: string
    recipientUserGroup: UserGroup
    relativeScheduledDays: number
    sendStrategy: DataSetNotificationTemplate.sendStrategy
    sharing: Sharing
    subjectTemplate: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace DataSetNotificationTemplate {
    export enum dataSetNotificationTrigger {
        DATA_SET_COMPLETION = "DATA_SET_COMPLETION",
        SCHEDULED_DAYS = "SCHEDULED_DAYS",
    }

    export enum notificationRecipient {
        ORGANISATION_UNIT_CONTACT = "ORGANISATION_UNIT_CONTACT",
        USER_GROUP = "USER_GROUP",
    }

    export enum sendStrategy {
        COLLECTIVE_SUMMARY = "COLLECTIVE_SUMMARY",
        SINGLE_NOTIFICATION = "SINGLE_NOTIFICATION",
    }
}

export type DatastoreEntry = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    key: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    namespace: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    value: string
}

export type DataSummary = {
    /**
     * keys are class java.lang.Integer
     */
    activeUsers: Record<string, number>
    /**
     * keys are class java.lang.Integer
     */
    dataValueCount: Record<string, number>
    /**
     * keys are class java.lang.Integer
     */
    eventCount: Record<string, number>
    objectCounts: Record<string, number>
    system: Dhis2Info
    userInvitations: Record<string, number>
}

export type DataSynchronizationJobParameters = {
    pageSize: number
}

export type DataValue = {
    attributeOptionCombo: string
    categoryOptionCombo: string
    comment: string
    created: string
    dataElement: string
    deleted: boolean
    followup: boolean
    lastUpdated: string
    orgUnit: string
    period: string
    storedBy: string
    value: string
}

export type DataValueAuditDto = {
    attributeOptionCombo: UID_CategoryOptionCombo
    auditType: DataValueAuditDto.auditType
    categoryOptionCombo: UID_CategoryOptionCombo
    created: string
    dataElement: UID_DataElement
    modifiedBy: string
    orgUnit: UID_OrganisationUnit
    period: string
    value: string
}

export namespace DataValueAuditDto {
    export enum auditType {
        CREATE = "CREATE",
        UPDATE = "UPDATE",
        DELETE = "DELETE",
        READ = "READ",
        SEARCH = "SEARCH",
    }
}

export type DataValueCategoryDto = {
    combo: UID_CategoryCombo
    options: Array<UID_CategoryOption>
}

export type DataValueContextDto = {
    audits: Array<DataValueAuditDto>
    history: Array<DataValueDto>
}

export type DataValueDto = {
    attribute: DataValueCategoryDto
    categoryOptionCombo: UID_CategoryOptionCombo
    comment: string
    created: string
    dataElement: UID_DataElement
    dataSet: UID_DataSet
    followUp: boolean
    force: boolean
    lastUpdated: string
    orgUnit: UID_OrganisationUnit
    period: string
    storedBy: string
    value: string
}

export type DataValueFollowUpRequest = {
    attribute: DataValueCategoryDto
    attributeOptionCombo: UID_CategoryOptionCombo
    categoryOptionCombo: UID_CategoryOptionCombo
    dataElement: UID_DataSet
    followup: boolean
    orgUnit: UID_OrganisationUnit
    period: string
}

export type DataValuesDto = {
    completeStatus: CompleteStatusDto
    dataValues: Array<DataValueDto>
    lockStatus: DataValuesDto.lockStatus
    minMaxValues: Array<MinMaxValueDto>
}

export namespace DataValuesDto {
    export enum lockStatus {
        LOCKED = "LOCKED",
        APPROVED = "APPROVED",
        OPEN = "OPEN",
    }
}

export type DataValueSet = {
    attributeCategoryOptions: Array<string>
    attributeOptionCombo: string
    categoryOptionComboIdScheme: string
    completeDate: string
    dataElementIdScheme: string
    dataSet: string
    dataSetIdScheme: string
    dataValues: Array<DataValue>
    dryRun: boolean
    idScheme: string
    orgUnit: string
    orgUnitIdScheme: string
    period: string
    strategy: string
}

export type DataValuesFollowUpRequest = {
    values: Array<DataValueFollowUpRequest>
}

export type DateFilterPeriod = {
    endBuffer: number
    endDate: string
    period: DateFilterPeriod.period
    startBuffer: number
    startDate: string
    type: DateFilterPeriod.type
}

export namespace DateFilterPeriod {
    export enum period {
        TODAY = "TODAY",
        YESTERDAY = "YESTERDAY",
        LAST_3_DAYS = "LAST_3_DAYS",
        LAST_7_DAYS = "LAST_7_DAYS",
        LAST_14_DAYS = "LAST_14_DAYS",
        LAST_30_DAYS = "LAST_30_DAYS",
        LAST_60_DAYS = "LAST_60_DAYS",
        LAST_90_DAYS = "LAST_90_DAYS",
        LAST_180_DAYS = "LAST_180_DAYS",
        THIS_MONTH = "THIS_MONTH",
        LAST_MONTH = "LAST_MONTH",
        THIS_BIMONTH = "THIS_BIMONTH",
        LAST_BIMONTH = "LAST_BIMONTH",
        THIS_QUARTER = "THIS_QUARTER",
        LAST_QUARTER = "LAST_QUARTER",
        THIS_SIX_MONTH = "THIS_SIX_MONTH",
        LAST_SIX_MONTH = "LAST_SIX_MONTH",
        WEEKS_THIS_YEAR = "WEEKS_THIS_YEAR",
        MONTHS_THIS_YEAR = "MONTHS_THIS_YEAR",
        BIMONTHS_THIS_YEAR = "BIMONTHS_THIS_YEAR",
        QUARTERS_THIS_YEAR = "QUARTERS_THIS_YEAR",
        THIS_YEAR = "THIS_YEAR",
        MONTHS_LAST_YEAR = "MONTHS_LAST_YEAR",
        QUARTERS_LAST_YEAR = "QUARTERS_LAST_YEAR",
        LAST_YEAR = "LAST_YEAR",
        LAST_5_YEARS = "LAST_5_YEARS",
        LAST_10_YEARS = "LAST_10_YEARS",
        LAST_12_MONTHS = "LAST_12_MONTHS",
        LAST_6_MONTHS = "LAST_6_MONTHS",
        LAST_3_MONTHS = "LAST_3_MONTHS",
        LAST_6_BIMONTHS = "LAST_6_BIMONTHS",
        LAST_4_QUARTERS = "LAST_4_QUARTERS",
        LAST_2_SIXMONTHS = "LAST_2_SIXMONTHS",
        THIS_FINANCIAL_YEAR = "THIS_FINANCIAL_YEAR",
        LAST_FINANCIAL_YEAR = "LAST_FINANCIAL_YEAR",
        LAST_5_FINANCIAL_YEARS = "LAST_5_FINANCIAL_YEARS",
        LAST_10_FINANCIAL_YEARS = "LAST_10_FINANCIAL_YEARS",
        THIS_WEEK = "THIS_WEEK",
        LAST_WEEK = "LAST_WEEK",
        THIS_BIWEEK = "THIS_BIWEEK",
        LAST_BIWEEK = "LAST_BIWEEK",
        LAST_4_WEEKS = "LAST_4_WEEKS",
        LAST_4_BIWEEKS = "LAST_4_BIWEEKS",
        LAST_12_WEEKS = "LAST_12_WEEKS",
        LAST_52_WEEKS = "LAST_52_WEEKS",
    }

    export enum type {
        RELATIVE = "RELATIVE",
        ABSOLUTE = "ABSOLUTE",
    }
}

export type DeflatedDataValue = {
    attributeOptionComboId: number
    categoryOptionComboId: number
    categoryOptionComboName: string
    comment: string
    dataElementId: number
    dataElementName: string
    deleted: boolean
    followup: boolean
    max: number
    min: number
    period: string
    periodId: number
    sourceId: number
    sourceName: string
    sourcePath: string
    value: string
}

export type DeletedObject = {
    code: string
    deletedAt: string
    deletedBy: string
    klass: string
    uid: string
}

export type Developer = {
    address: string
    email: string
    name: string
    organisation: string
}

export type Dhis2Info = {
    buildTime: string
    revision: string
    serverDate: string
    systemId: string
    version: string
}

export type DimensionalObject = {
    access: Access
    aggregationType: DimensionalObject.aggregationType
    allItems: boolean
    analyticsType: DimensionalObject.analyticsType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: DimensionalObject.dataDimensionType
    description: string
    dimension: string
    dimensionDisplayName: string
    dimensionItemKeywords: DimensionItemKeywords
    dimensionName: string
    dimensionType: DimensionalObject.dimensionType
    displayDescription: string
    displayName: string
    displayShortName: string
    eventRepetition: EventRepetition
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    fixed: boolean
    groupUUID: string
    href: string
    id: number
    items: Array<Ref_DimensionalItemObject>
    key: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: boolean
    name: string
    optionSet: OptionSet
    programStage: ProgramStage
    publicAccess: string
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    uid: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: DimensionalObject.valueType
}

export namespace DimensionalObject {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum analyticsType {
        AGGREGATE = "AGGREGATE",
        EVENT = "EVENT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum dimensionType {
        DATA_X = "DATA_X",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        DATA_COLLAPSED = "DATA_COLLAPSED",
        CATEGORY_OPTION_COMBO = "CATEGORY_OPTION_COMBO",
        ATTRIBUTE_OPTION_COMBO = "ATTRIBUTE_OPTION_COMBO",
        PERIOD = "PERIOD",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        CATEGORY_OPTION_GROUP_SET = "CATEGORY_OPTION_GROUP_SET",
        DATA_ELEMENT_GROUP_SET = "DATA_ELEMENT_GROUP_SET",
        ORGANISATION_UNIT_GROUP_SET = "ORGANISATION_UNIT_GROUP_SET",
        ORGANISATION_UNIT_GROUP = "ORGANISATION_UNIT_GROUP",
        CATEGORY = "CATEGORY",
        OPTION_GROUP_SET = "OPTION_GROUP_SET",
        VALIDATION_RULE = "VALIDATION_RULE",
        STATIC = "STATIC",
        ORGANISATION_UNIT_LEVEL = "ORGANISATION_UNIT_LEVEL",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type DimensionItemKeywords = {
    empty: boolean
    keywords: Array<Keyword>
}

export type DisableInactiveUsersJobParameters = {
    inactiveMonths: number
    reminderDaysBefore: number
}

export type Document = {
    access: Access
    attachment: boolean
    attributeValues: Array<AttributeValue>
    code: string
    contentType: string
    created: string
    createdBy: User
    displayName: string
    external: boolean
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type Dxf2EventsEvent_DataValue = {
    created: string
    createdByUserInfo: UserInfoSnapshot
    dataElement: string
    lastUpdated: string
    lastUpdatedByUserInfo: UserInfoSnapshot
    providedElsewhere: boolean
    storedBy: string
    value: string
}

export type Dxf2EventsTrackedentity_Attribute = {
    attribute: string
    code: string
    created: string
    displayName: string
    lastUpdated: string
    storedBy: string
    value: string
    valueType: Dxf2EventsTrackedentity_Attribute.valueType
}

export namespace Dxf2EventsTrackedentity_Attribute {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type Dxf2EventsTrackedentity_TrackedEntityInstance = {
    attributes: Array<Dxf2EventsTrackedentity_Attribute>
    coordinates: string
    created: string
    createdAtClient: string
    createdByUserInfo: UserInfoSnapshot
    deleted: boolean
    enrollments: Array<Enrollment>
    featureType: Dxf2EventsTrackedentity_TrackedEntityInstance.featureType
    geometry: Record<string, any>
    inactive: boolean
    lastUpdated: string
    lastUpdatedAtClient: string
    lastUpdatedByUserInfo: UserInfoSnapshot
    orgUnit: string
    potentialDuplicate: boolean
    programOwners: Array<ProgramOwner>
    relationships: Array<Relationship>
    storedBy: string
    trackedEntityInstance: string
    trackedEntityType: string
}

export namespace Dxf2EventsTrackedentity_TrackedEntityInstance {
    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }
}

export type Email = {
    recipients: Array<User>
    sender: User
    subject: string
    text: string
}

export type Enrollment = {
    attributes: Array<Dxf2EventsTrackedentity_Attribute>
    completedBy: string
    completedDate: string
    created: string
    createdAtClient: string
    createdByUserInfo: UserInfoSnapshot
    deleted: boolean
    enrollment: string
    enrollmentDate: string
    events: Array<Event>
    followup: boolean
    geometry: Record<string, any>
    incidentDate: string
    lastUpdated: string
    lastUpdatedAtClient: string
    lastUpdatedByUserInfo: UserInfoSnapshot
    notes: Array<Note>
    orgUnit: string
    orgUnitName: string
    program: string
    relationships: Array<Relationship>
    status: Enrollment.status
    storedBy: string
    trackedEntityInstance: string
    trackedEntityType: string
}

export namespace Enrollment {
    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }
}

export type Entity = {
    errorReports: Array<Error>
    index: number
    trackerType: Entity.trackerType
    uid: string
}

export namespace Entity {
    export enum trackerType {
        TRACKED_ENTITY = "TRACKED_ENTITY",
        ENROLLMENT = "ENROLLMENT",
        EVENT = "EVENT",
        RELATIONSHIP = "RELATIONSHIP",
    }
}

export type EntityQueryCriteria = {
    assignedUserMode: EntityQueryCriteria.assignedUserMode
    assignedUsers: Array<string>
    attributeValueFilters: Array<AttributeValueFilter>
    displayColumnOrder: Array<string>
    enrollmentCreatedDate: DateFilterPeriod
    enrollmentIncidentDate: DateFilterPeriod
    enrollmentStatus: EntityQueryCriteria.enrollmentStatus
    eventDate: DateFilterPeriod
    eventStatus: EntityQueryCriteria.eventStatus
    followUp: boolean
    lastUpdatedDate: DateFilterPeriod
    order: string
    organisationUnit: string
    ouMode: EntityQueryCriteria.ouMode
    programStage: string
    trackedEntityInstances: Array<string>
    trackedEntityType: string
}

export namespace EntityQueryCriteria {
    export enum assignedUserMode {
        CURRENT = "CURRENT",
        PROVIDED = "PROVIDED",
        NONE = "NONE",
        ANY = "ANY",
        ALL = "ALL",
    }

    export enum enrollmentStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }

    export enum eventStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }

    export enum ouMode {
        SELECTED = "SELECTED",
        CHILDREN = "CHILDREN",
        DESCENDANTS = "DESCENDANTS",
        ACCESSIBLE = "ACCESSIBLE",
        CAPTURE = "CAPTURE",
        ALL = "ALL",
    }
}

export type EntriesResponse = {
    entries: Array<Record<string, Record<string, any>>>
    pager: WebapiControllerDatastoreController_Pager
}

export type Error = {
    errorCode: string
    message: string
    trackerType: string
    uid: string
}

export type ErrorReport = {
    errorCode: ErrorReport.errorCode
    errorKlass: string
    errorProperties: Array<Record<string, any>>
    errorProperty: string
    mainId: string
    mainKlass: string
    message: string
    /**
     * The actual type is unknown.
     * (Java type was: `class java.lang.Object`)
     */
    value: Record<string, any>
}

export namespace ErrorReport {
    export enum errorCode {
        E1000 = "E1000",
        E1001 = "E1001",
        E1002 = "E1002",
        E1003 = "E1003",
        E1004 = "E1004",
        E1005 = "E1005",
        E1006 = "E1006",
        E1100 = "E1100",
        E1101 = "E1101",
        E1102 = "E1102",
        E1103 = "E1103",
        E1104 = "E1104",
        E1105 = "E1105",
        E1106 = "E1106",
        E1107 = "E1107",
        E1108 = "E1108",
        E1109 = "E1109",
        E1110 = "E1110",
        E1111 = "E1111",
        E1112 = "E1112",
        E1113 = "E1113",
        E1114 = "E1114",
        E1115 = "E1115",
        E1116 = "E1116",
        E1117 = "E1117",
        E1118 = "E1118",
        E1119 = "E1119",
        E1120 = "E1120",
        E1500 = "E1500",
        E1501 = "E1501",
        E1502 = "E1502",
        E1503 = "E1503",
        E1504 = "E1504",
        E1510 = "E1510",
        E1511 = "E1511",
        E1512 = "E1512",
        E1513 = "E1513",
        E1514 = "E1514",
        E1515 = "E1515",
        E1516 = "E1516",
        E1520 = "E1520",
        E1521 = "E1521",
        E1522 = "E1522",
        E1523 = "E1523",
        E2000 = "E2000",
        E2001 = "E2001",
        E2002 = "E2002",
        E2003 = "E2003",
        E2004 = "E2004",
        E2005 = "E2005",
        E2006 = "E2006",
        E2007 = "E2007",
        E2008 = "E2008",
        E2009 = "E2009",
        E2010 = "E2010",
        E2011 = "E2011",
        E2012 = "E2012",
        E2013 = "E2013",
        E2014 = "E2014",
        E2015 = "E2015",
        E2016 = "E2016",
        E2017 = "E2017",
        E2018 = "E2018",
        E2019 = "E2019",
        E2020 = "E2020",
        E2021 = "E2021",
        E2022 = "E2022",
        E2023 = "E2023",
        E2024 = "E2024",
        E2025 = "E2025",
        E2026 = "E2026",
        E2027 = "E2027",
        E2028 = "E2028",
        E2029 = "E2029",
        E2030 = "E2030",
        E2031 = "E2031",
        E2032 = "E2032",
        E2033 = "E2033",
        E2034 = "E2034",
        E2035 = "E2035",
        E2036 = "E2036",
        E2037 = "E2037",
        E2038 = "E2038",
        E2039 = "E2039",
        E2040 = "E2040",
        E2041 = "E2041",
        E2042 = "E2042",
        E2043 = "E2043",
        E2044 = "E2044",
        E2200 = "E2200",
        E2201 = "E2201",
        E2202 = "E2202",
        E2203 = "E2203",
        E2204 = "E2204",
        E2205 = "E2205",
        E2206 = "E2206",
        E2207 = "E2207",
        E2208 = "E2208",
        E2300 = "E2300",
        E2301 = "E2301",
        E3000 = "E3000",
        E3001 = "E3001",
        E3002 = "E3002",
        E3003 = "E3003",
        E3004 = "E3004",
        E3005 = "E3005",
        E3006 = "E3006",
        E3008 = "E3008",
        E3009 = "E3009",
        E3010 = "E3010",
        E3011 = "E3011",
        E3012 = "E3012",
        E3013 = "E3013",
        E3014 = "E3014",
        E3015 = "E3015",
        E3016 = "E3016",
        E3017 = "E3017",
        E3018 = "E3018",
        E3019 = "E3019",
        E3020 = "E3020",
        E3021 = "E3021",
        E3022 = "E3022",
        E3023 = "E3023",
        E3024 = "E3024",
        E3025 = "E3025",
        E3026 = "E3026",
        E3027 = "E3027",
        E3028 = "E3028",
        E3029 = "E3029",
        E3030 = "E3030",
        E3031 = "E3031",
        E3032 = "E3032",
        E3040 = "E3040",
        E4000 = "E4000",
        E4001 = "E4001",
        E4002 = "E4002",
        E4003 = "E4003",
        E4004 = "E4004",
        E4005 = "E4005",
        E4006 = "E4006",
        E4007 = "E4007",
        E4008 = "E4008",
        E4009 = "E4009",
        E4010 = "E4010",
        E4011 = "E4011",
        E4012 = "E4012",
        E4013 = "E4013",
        E4014 = "E4014",
        E4015 = "E4015",
        E4016 = "E4016",
        E4017 = "E4017",
        E4018 = "E4018",
        E4019 = "E4019",
        E4020 = "E4020",
        E4021 = "E4021",
        E4022 = "E4022",
        E4023 = "E4023",
        E4024 = "E4024",
        E4025 = "E4025",
        E4026 = "E4026",
        E4027 = "E4027",
        E4028 = "E4028",
        E4029 = "E4029",
        E4030 = "E4030",
        E4031 = "E4031",
        E4032 = "E4032",
        E4033 = "E4033",
        E4034 = "E4034",
        E4035 = "E4035",
        E4036 = "E4036",
        E4037 = "E4037",
        E4038 = "E4038",
        E4039 = "E4039",
        E4040 = "E4040",
        E4041 = "E4041",
        E4042 = "E4042",
        E4043 = "E4043",
        E4044 = "E4044",
        E4045 = "E4045",
        E4046 = "E4046",
        E4047 = "E4047",
        E4048 = "E4048",
        E4049 = "E4049",
        E4054 = "E4054",
        E4056 = "E4056",
        E4055 = "E4055",
        E4050 = "E4050",
        E4051 = "E4051",
        E4052 = "E4052",
        E4053 = "E4053",
        E4057 = "E4057",
        E4060 = "E4060",
        E4061 = "E4061",
        E4062 = "E4062",
        E4063 = "E4063",
        E4064 = "E4064",
        E4065 = "E4065",
        E4066 = "E4066",
        E4067 = "E4067",
        E4068 = "E4068",
        E4300 = "E4300",
        E4301 = "E4301",
        E4302 = "E4302",
        E4303 = "E4303",
        E4304 = "E4304",
        E4305 = "E4305",
        E4306 = "E4306",
        E4307 = "E4307",
        E4308 = "E4308",
        E4309 = "E4309",
        E4310 = "E4310",
        E4311 = "E4311",
        E4312 = "E4312",
        E4313 = "E4313",
        E4314 = "E4314",
        E4315 = "E4315",
        E5000 = "E5000",
        E5001 = "E5001",
        E5002 = "E5002",
        E5003 = "E5003",
        E5004 = "E5004",
        E5005 = "E5005",
        E5006 = "E5006",
        E5007 = "E5007",
        E6000 = "E6000",
        E6001 = "E6001",
        E6002 = "E6002",
        E6003 = "E6003",
        E6004 = "E6004",
        E6005 = "E6005",
        E6006 = "E6006",
        E6007 = "E6007",
        E6008 = "E6008",
        E6009 = "E6009",
        E6010 = "E6010",
        E6011 = "E6011",
        E6012 = "E6012",
        E6013 = "E6013",
        E6014 = "E6014",
        E6015 = "E6015",
        E6016 = "E6016",
        E6017 = "E6017",
        E6018 = "E6018",
        E6019 = "E6019",
        E6020 = "E6020",
        E6021 = "E6021",
        E6100 = "E6100",
        E6101 = "E6101",
        E6200 = "E6200",
        E6201 = "E6201",
        E6202 = "E6202",
        E6203 = "E6203",
        E6204 = "E6204",
        E6205 = "E6205",
        E6206 = "E6206",
        E6207 = "E6207",
        E6208 = "E6208",
        E6209 = "E6209",
        E6210 = "E6210",
        E6211 = "E6211",
        E6300 = "E6300",
        E6301 = "E6301",
        E6302 = "E6302",
        E6303 = "E6303",
        E6304 = "E6304",
        E6305 = "E6305",
        E7000 = "E7000",
        E7003 = "E7003",
        E7004 = "E7004",
        E7005 = "E7005",
        E7006 = "E7006",
        E7007 = "E7007",
        E7010 = "E7010",
        E7020 = "E7020",
        E7021 = "E7021",
        E7022 = "E7022",
        E7023 = "E7023",
        E7024 = "E7024",
        E7100 = "E7100",
        E7101 = "E7101",
        E7102 = "E7102",
        E7103 = "E7103",
        E7104 = "E7104",
        E7105 = "E7105",
        E7106 = "E7106",
        E7107 = "E7107",
        E7108 = "E7108",
        E7109 = "E7109",
        E7110 = "E7110",
        E7111 = "E7111",
        E7112 = "E7112",
        E7113 = "E7113",
        E7114 = "E7114",
        E7115 = "E7115",
        E7116 = "E7116",
        E7117 = "E7117",
        E7118 = "E7118",
        E7119 = "E7119",
        E7120 = "E7120",
        E7121 = "E7121",
        E7122 = "E7122",
        E7123 = "E7123",
        E7124 = "E7124",
        E7125 = "E7125",
        E7126 = "E7126",
        E7127 = "E7127",
        E7128 = "E7128",
        E7129 = "E7129",
        E7130 = "E7130",
        E7131 = "E7131",
        E7132 = "E7132",
        E7133 = "E7133",
        E7134 = "E7134",
        E7135 = "E7135",
        E7200 = "E7200",
        E7201 = "E7201",
        E7202 = "E7202",
        E7203 = "E7203",
        E7204 = "E7204",
        E7205 = "E7205",
        E7206 = "E7206",
        E7207 = "E7207",
        E7208 = "E7208",
        E7209 = "E7209",
        E7210 = "E7210",
        E7211 = "E7211",
        E7212 = "E7212",
        E7213 = "E7213",
        E7214 = "E7214",
        E7215 = "E7215",
        E7216 = "E7216",
        E7217 = "E7217",
        E7218 = "E7218",
        E7219 = "E7219",
        E7220 = "E7220",
        E7221 = "E7221",
        E7222 = "E7222",
        E7223 = "E7223",
        E7224 = "E7224",
        E7225 = "E7225",
        E7226 = "E7226",
        E7227 = "E7227",
        E7228 = "E7228",
        E7229 = "E7229",
        E7230 = "E7230",
        E7231 = "E7231",
        E7232 = "E7232",
        E7234 = "E7234",
        E7300 = "E7300",
        E7301 = "E7301",
        E7400 = "E7400",
        E7500 = "E7500",
        E7501 = "E7501",
        E7502 = "E7502",
        E7503 = "E7503",
        E7600 = "E7600",
        E7601 = "E7601",
        E7602 = "E7602",
        E7603 = "E7603",
        E7604 = "E7604",
        E7610 = "E7610",
        E7611 = "E7611",
        E7612 = "E7612",
        E7613 = "E7613",
        E7614 = "E7614",
        E7615 = "E7615",
        E7616 = "E7616",
        E7617 = "E7617",
        E7618 = "E7618",
        E7619 = "E7619",
        E7620 = "E7620",
        E7621 = "E7621",
        E7630 = "E7630",
        E7631 = "E7631",
        E7632 = "E7632",
        E7633 = "E7633",
        E7634 = "E7634",
        E7635 = "E7635",
        E7636 = "E7636",
        E7637 = "E7637",
        E7638 = "E7638",
        E7639 = "E7639",
        E7640 = "E7640",
        E7641 = "E7641",
        E7642 = "E7642",
        E7643 = "E7643",
        E7644 = "E7644",
        E7645 = "E7645",
        E7650 = "E7650",
        E7651 = "E7651",
        E7652 = "E7652",
        E7653 = "E7653",
        E7700 = "E7700",
        E7701 = "E7701",
        E7702 = "E7702",
        E7703 = "E7703",
        E7704 = "E7704",
        E7705 = "E7705",
        E7706 = "E7706",
        E7707 = "E7707",
        E7708 = "E7708",
        E7709 = "E7709",
        E7710 = "E7710",
        E7711 = "E7711",
        E7712 = "E7712",
    }
}

export type Event = {
    assignedUser: string
    assignedUserDisplayName: string
    assignedUserFirstName: string
    assignedUserSurname: string
    assignedUserUsername: string
    attributeCategoryOptions: string
    attributeOptionCombo: string
    completedBy: string
    completedDate: string
    created: string
    createdAtClient: string
    createdByUserInfo: UserInfoSnapshot
    dataValues: Array<Dxf2EventsEvent_DataValue>
    deleted: boolean
    dueDate: string
    enrollment: string
    enrollmentStatus: Event.enrollmentStatus
    event: string
    eventDate: string
    followup: boolean
    geometry: Record<string, any>
    href: string
    lastUpdated: string
    lastUpdatedAtClient: string
    lastUpdatedByUserInfo: UserInfoSnapshot
    notes: Array<Note>
    orgUnit: string
    orgUnitName: string
    program: string
    programStage: string
    programType: Event.programType
    relationships: Array<Relationship>
    status: Event.status
    storedBy: string
    trackedEntityInstance: string
}

export namespace Event {
    export enum enrollmentStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }

    export enum programType {
        WITH_REGISTRATION = "WITH_REGISTRATION",
        WITHOUT_REGISTRATION = "WITHOUT_REGISTRATION",
    }

    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }
}

export type EventDataFilter = {
    dataItem: string
    dateFilter: DateFilterPeriod
    eq: string
    ge: string
    gt: string
    in: Array<string>
    le: string
    like: string
    lt: string
}

export type EventFilter = {
    assignedUserMode: EventFilter.assignedUserMode
    assignedUsers: Array<string>
    eventCreatedPeriod: FilterPeriod
    eventStatus: EventFilter.eventStatus
    programStage: string
}

export namespace EventFilter {
    export enum assignedUserMode {
        CURRENT = "CURRENT",
        PROVIDED = "PROVIDED",
        NONE = "NONE",
        ANY = "ANY",
        ALL = "ALL",
    }

    export enum eventStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }
}

export type Eventhook_Source = {
    fields: string
    path: string
}

export type EventHook = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    disabled: boolean
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    source: Eventhook_Source
    targets: Array<WebhookTarget | ConsoleTarget | JmsTarget | KafkaTarget>
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type EventProgramsDataSynchronizationJobParameters = {
    pageSize: number
}

export type EventQueryCriteria = {
    assignedUserMode: EventQueryCriteria.assignedUserMode
    assignedUsers: Array<string>
    completedDate: DateFilterPeriod
    dataFilters: Array<EventDataFilter>
    displayColumnOrder: Array<string>
    dueDate: DateFilterPeriod
    eventDate: DateFilterPeriod
    events: Array<string>
    followUp: boolean
    lastUpdatedDate: DateFilterPeriod
    order: string
    organisationUnit: string
    ouMode: EventQueryCriteria.ouMode
    status: EventQueryCriteria.status
}

export namespace EventQueryCriteria {
    export enum assignedUserMode {
        CURRENT = "CURRENT",
        PROVIDED = "PROVIDED",
        NONE = "NONE",
        ANY = "ANY",
        ALL = "ALL",
    }

    export enum ouMode {
        SELECTED = "SELECTED",
        CHILDREN = "CHILDREN",
        DESCENDANTS = "DESCENDANTS",
        ACCESSIBLE = "ACCESSIBLE",
        CAPTURE = "CAPTURE",
        ALL = "ALL",
    }

    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }
}

export type EventRepetition = {
    dimension: string
    indexes: Array<number>
    parent: EventRepetition.parent
}

export namespace EventRepetition {
    export enum parent {
        COLUMN = "COLUMN",
        ROW = "ROW",
        FILTER = "FILTER",
    }
}

export type EventRow = {
    attributeCategoryOptions: string
    attributes: Array<Dxf2EventsTrackedentity_Attribute>
    dataValues: Array<Dxf2EventsEvent_DataValue>
    deleted: boolean
    dueDate: string
    enrollment: string
    event: string
    eventDate: string
    followup: boolean
    href: string
    notes: Array<Note>
    orgUnit: string
    orgUnitName: string
    program: string
    programStage: string
    trackedEntityInstance: string
    trackedEntityInstanceCreated: string
    trackedEntityInstanceInactive: boolean
    trackedEntityInstanceOrgUnit: string
    trackedEntityInstanceOrgUnitName: string
}

export type EventRows = {
    eventRows: Array<EventRow>
    pager: Pager
}

export type EventVisualization = {
    access: Access
    aggregationType: EventVisualization.aggregationType
    attributeDimensions: Array<TrackedEntityAttributeDimension>
    attributeValueDimension: TrackedEntityAttribute
    attributeValues: Array<AttributeValue>
    baseLineLabel: string
    baseLineValue: number
    categoryDimensions: Array<CategoryDimension>
    categoryOptionGroupSetDimensions: Array<CategoryOptionGroupSetDimension>
    code: string
    colSubTotals: boolean
    colTotals: boolean
    collapseDataDimensions: boolean
    columnDimensions: Array<string>
    columns: Array<DimensionalObject>
    completedOnly: boolean
    created: string
    createdBy: User
    cumulativeValues: boolean
    dataDimensionItems: Array<DataDimensionItem>
    dataElementDimensions: Array<TrackedEntityDataElementDimension>
    dataElementGroupSetDimensions: Array<DataElementGroupSetDimension>
    dataElementValueDimension: DataElement
    dataType: EventVisualization.dataType
    description: string
    digitGroupSeparator: EventVisualization.digitGroupSeparator
    displayBaseLineLabel: string
    displayDensity: EventVisualization.displayDensity
    displayDescription: string
    displayDomainAxisLabel: string
    displayFormName: string
    displayName: string
    displayRangeAxisLabel: string
    displayShortName: string
    displaySubtitle: string
    displayTargetLineLabel: string
    displayTitle: string
    domainAxisLabel: string
    endDate: string
    eventStatus: EventVisualization.eventStatus
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filterDimensions: Array<string>
    filters: Array<DimensionalObject>
    fontSize: EventVisualization.fontSize
    formName: string
    hideEmptyRowItems: EventVisualization.hideEmptyRowItems
    hideEmptyRows: boolean
    hideLegend: boolean
    hideNaData: boolean
    hideSubtitle: boolean
    hideTitle: boolean
    href: string
    id: string
    interpretations: Array<Interpretation>
    itemOrganisationUnitGroups: Array<OrganisationUnitGroup>
    lastUpdated: string
    lastUpdatedBy: User
    legacy: boolean
    legend: LegendDefinitions
    name: string
    noSpaceBetweenColumns: boolean
    orgUnitField: string
    organisationUnitGroupSetDimensions: Array<OrganisationUnitGroupSetDimension>
    organisationUnitLevels: Array<number>
    organisationUnits: Array<OrganisationUnit>
    outputType: EventVisualization.outputType
    parentGraphMap: Record<string, string>
    percentStackedValues: boolean
    periods: Array<string>
    program: Program
    programIndicatorDimensions: Array<TrackedEntityProgramIndicatorDimension>
    programStage: ProgramStage
    programStatus: EventVisualization.programStatus
    publicAccess: string
    rangeAxisDecimals: number
    rangeAxisLabel: string
    rangeAxisMaxValue: number
    rangeAxisMinValue: number
    rangeAxisSteps: number
    regressionType: EventVisualization.regressionType
    relativePeriods: RelativePeriods
    repetitions: Array<EventRepetition>
    rowDimensions: Array<string>
    rowSubTotals: boolean
    rowTotals: boolean
    rows: Array<DimensionalObject>
    sharing: Sharing
    shortName: string
    showData: boolean
    showDimensionLabels: boolean
    showHierarchy: boolean
    simpleDimensions: Array<SimpleDimension>
    sortOrder: number
    startDate: string
    subscribed: boolean
    subscribers: Array<string>
    subtitle: string
    targetLineLabel: string
    targetLineValue: number
    timeField: string
    title: string
    topLimit: number
    translations: Array<Translation>
    type: EventVisualization.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    userOrgUnitType: EventVisualization.userOrgUnitType
    userOrganisationUnit: boolean
    userOrganisationUnitChildren: boolean
    userOrganisationUnitGrandChildren: boolean
    value: Ref_DimensionalItemObject
}

export namespace EventVisualization {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataType {
        AGGREGATED_VALUES = "AGGREGATED_VALUES",
        EVENTS = "EVENTS",
    }

    export enum digitGroupSeparator {
        COMMA = "COMMA",
        SPACE = "SPACE",
        NONE = "NONE",
    }

    export enum displayDensity {
        COMFORTABLE = "COMFORTABLE",
        NORMAL = "NORMAL",
        COMPACT = "COMPACT",
        NONE = "NONE",
    }

    export enum eventStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }

    export enum fontSize {
        LARGE = "LARGE",
        NORMAL = "NORMAL",
        SMALL = "SMALL",
    }

    export enum hideEmptyRowItems {
        NONE = "NONE",
        BEFORE_FIRST = "BEFORE_FIRST",
        AFTER_LAST = "AFTER_LAST",
        BEFORE_FIRST_AFTER_LAST = "BEFORE_FIRST_AFTER_LAST",
        ALL = "ALL",
    }

    export enum outputType {
        EVENT = "EVENT",
        ENROLLMENT = "ENROLLMENT",
        TRACKED_ENTITY_INSTANCE = "TRACKED_ENTITY_INSTANCE",
    }

    export enum programStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }

    export enum regressionType {
        NONE = "NONE",
        LINEAR = "LINEAR",
        POLYNOMIAL = "POLYNOMIAL",
        LOESS = "LOESS",
    }

    export enum type {
        COLUMN = "COLUMN",
        STACKED_COLUMN = "STACKED_COLUMN",
        BAR = "BAR",
        STACKED_BAR = "STACKED_BAR",
        LINE = "LINE",
        LINE_LIST = "LINE_LIST",
        AREA = "AREA",
        STACKED_AREA = "STACKED_AREA",
        PIE = "PIE",
        RADAR = "RADAR",
        GAUGE = "GAUGE",
        YEAR_OVER_YEAR_LINE = "YEAR_OVER_YEAR_LINE",
        YEAR_OVER_YEAR_COLUMN = "YEAR_OVER_YEAR_COLUMN",
        SINGLE_VALUE = "SINGLE_VALUE",
        PIVOT_TABLE = "PIVOT_TABLE",
        SCATTER = "SCATTER",
        BUBBLE = "BUBBLE",
    }

    export enum userOrgUnitType {
        DATA_CAPTURE = "DATA_CAPTURE",
        DATA_OUTPUT = "DATA_OUTPUT",
        TEI_SEARCH = "TEI_SEARCH",
    }
}

export type ExecutionPlan = {
    executionTime: number
    plan: Record<string, any>
    planningTime: number
    query: string
    timeInMillis: number
}

export type Expression = {
    description: string
    displayDescription: string
    expression: string
    missingValueStrategy: Expression.missingValueStrategy
    slidingWindow: boolean
    translations: Array<Translation>
}

export namespace Expression {
    export enum missingValueStrategy {
        SKIP_IF_ANY_VALUE_MISSING = "SKIP_IF_ANY_VALUE_MISSING",
        SKIP_IF_ALL_VALUES_MISSING = "SKIP_IF_ALL_VALUES_MISSING",
        NEVER_SKIP = "NEVER_SKIP",
    }
}

export type ExpressionDimensionItem = {
    access: Access
    aggregateExportAttributeOptionCombo: string
    aggregateExportCategoryOptionCombo: string
    aggregationType: ExpressionDimensionItem.aggregationType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    expression: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    missingValueStrategy: ExpressionDimensionItem.missingValueStrategy
    name: string
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    slidingWindow: boolean
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ExpressionDimensionItem {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum missingValueStrategy {
        SKIP_IF_ANY_VALUE_MISSING = "SKIP_IF_ANY_VALUE_MISSING",
        SKIP_IF_ALL_VALUES_MISSING = "SKIP_IF_ALL_VALUES_MISSING",
        NEVER_SKIP = "NEVER_SKIP",
    }
}

export type ExternalMapLayer = {
    access: Access
    attributeValues: Array<AttributeValue>
    attribution: string
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    imageFormat: ExternalMapLayer.imageFormat
    lastUpdated: string
    lastUpdatedBy: User
    layers: string
    legendSet: LegendSet
    legendSetUrl: string
    mapLayerPosition: ExternalMapLayer.mapLayerPosition
    mapService: ExternalMapLayer.mapService
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ExternalMapLayer {
    export enum imageFormat {
        PNG = "PNG",
        JPG = "JPG",
    }

    export enum mapLayerPosition {
        BASEMAP = "BASEMAP",
        OVERLAY = "OVERLAY",
    }

    export enum mapService {
        WMS = "WMS",
        TMS = "TMS",
        XYZ = "XYZ",
        VECTOR_STYLE = "VECTOR_STYLE",
    }
}

export type FavoriteStatistics = {
    created: string
    id: string
    name: string
    position: number
    views: number
}

export type Field = {
    categoryOptionCombo: string
    comment: string
    dataElement: string
    label: string
    optionSet: string
    type: Field.type
    value: string
}

export namespace Field {
    export enum type {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type FieldPath = {
    exclude: boolean
    fullPath: string
    name: string
    path: Array<string>
    preset: boolean
    property: Property
    root: boolean
    transformer: boolean
    transformers: Array<FieldPathTransformer>
}

export type FieldPathTransformer = {
    name: string
    parameters: Array<string>
}

export type FileResource = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    contentLength: number
    contentMd5: string
    contentType: string
    created: string
    createdBy: User
    displayName: string
    domain: FileResource.domain
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    hasMultipleStorageFiles: boolean
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    storageStatus: FileResource.storageStatus
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace FileResource {
    export enum domain {
        DATA_VALUE = "DATA_VALUE",
        PUSH_ANALYSIS = "PUSH_ANALYSIS",
        DOCUMENT = "DOCUMENT",
        MESSAGE_ATTACHMENT = "MESSAGE_ATTACHMENT",
        USER_AVATAR = "USER_AVATAR",
        ORG_UNIT = "ORG_UNIT",
    }

    export enum storageStatus {
        NONE = "NONE",
        PENDING = "PENDING",
        FAILED = "FAILED",
        STORED = "STORED",
    }
}

export type FileTypeValueOptions = {
    allowedContentTypes: Array<string>
    maxFileSize: number
    version: number
}

export type Filter = {
    dimension: string
    items: Array<string>
}

export type FilterPeriod = {
    periodFrom: number
    periodTo: number
}

export type FollowupAnalysisMetadata = {
    coc: Array<string>
    de: Array<string>
    endDate: string
    maxResults: number
    ou: Array<string>
    startDate: string
}

export type FollowupAnalysisResponse = {
    followupValues: Array<FollowupValue>
    metadata: FollowupAnalysisMetadata
}

export type FollowupParams = {
    attributeOptionComboId: number
    categoryOptionComboId: number
    dataElementId: number
    followup: boolean
    organisationUnitId: number
    periodId: number
}

export type FollowupValue = {
    aoc: string
    aocName: string
    coc: string
    cocName: string
    comment: string
    created: string
    de: string
    deName: string
    lastUpdated: string
    max: number
    min: number
    ou: string
    ouName: string
    ouPath: string
    pe: string
    peEndDate: string
    peName: string
    peStartDate: string
    peType: string
    storedBy: string
    value: string
}

export type FontStyle = {
    bold: boolean
    font: FontStyle.font
    fontSize: number
    italic: boolean
    textAlign: FontStyle.textAlign
    textColor: string
    underline: boolean
}

export namespace FontStyle {
    export enum font {
        ARIAL = "ARIAL",
        SANS_SERIF = "SANS_SERIF",
        VERDANA = "VERDANA",
        ROBOTO = "ROBOTO",
    }

    export enum textAlign {
        LEFT = "LEFT",
        CENTER = "CENTER",
        RIGHT = "RIGHT",
    }
}

export type Form = {
    categoryCombo: WebapiWebdomainForm_CategoryCombo
    groups: Array<Group>
    label: string
    options: Record<string, Record<string, any>>
    subtitle: string
}

export type GenericGatewayParameter = {
    confidential: boolean
    encode: boolean
    header: boolean
    key: string
    value: string
}

export type GenericHttpGatewayConfig = {
    configurationTemplate: string
    contentType: GenericHttpGatewayConfig.contentType
    id: string
    isDefault: boolean
    maxSmsLength: string
    name: string
    parameters: Array<GenericGatewayParameter>
    password: string
    sendUrlParameters: boolean
    uid: string
    urlTemplate: string
    useGet: boolean
    username: string
}

export namespace GenericHttpGatewayConfig {
    export enum contentType {
        APPLICATION_JSON = "APPLICATION_JSON",
        APPLICATION_XML = "APPLICATION_XML",
        TEXT_PLAIN = "TEXT_PLAIN",
        FORM_URL_ENCODED = "FORM_URL_ENCODED",
    }
}

export type GeoFeature = {
    co: string
    code: string
    dimensions: Record<string, string>
    hcd: boolean
    hcu: boolean
    id: string
    le: number
    na: string
    pg: string
    pi: string
    pn: string
    ty: number
}

export type GistPager = {
    nextPage?: string
    page: number
    pageCount?: number
    pageSize: number
    prevPage?: string
    total?: number
}

export type GistPreferences = {
    included: GistPreferences.included
    transformation: GistPreferences.transformation
}

export namespace GistPreferences {
    export enum included {
        FALSE = "FALSE",
        TRUE = "TRUE",
        AUTO = "AUTO",
    }

    export enum transformation {
        AUTO = "AUTO",
        NONE = "NONE",
        IS_EMPTY = "IS_EMPTY",
        IS_NOT_EMPTY = "IS_NOT_EMPTY",
        SIZE = "SIZE",
        MEMBER = "MEMBER",
        NOT_MEMBER = "NOT_MEMBER",
        IDS = "IDS",
        ID_OBJECTS = "ID_OBJECTS",
        PLUCK = "PLUCK",
        FROM = "FROM",
    }
}

export type GoogleAccessToken = {
    access_token: string
    client_id: string
    expires_in: number
}

export type Grid = {
    headerWidth: number
    headers: Array<GridHeader>
    height: number
    internalMetaData: Record<string, Record<string, any>>
    lastDataRow: boolean
    metaColumnIndexes: Array<number>
    metaData: Record<string, Record<string, any>>
    metadataHeaders: Array<GridHeader>
    performanceMetrics: PerformanceMetrics
    refs: Array<Reference>
    rows: Array<Array<Record<string, any>>>
    subtitle: string
    table: string
    title: string
    visibleHeaders: Array<GridHeader>
    visibleRows: Array<Array<Record<string, any>>>
    visibleWidth: number
    width: number
}

export type GridHeader = {
    column: string
    hidden: boolean
    legendSet: string
    meta: boolean
    name: string
    optionSet: string
    programStage: string
    repeatableStageParams: string
    stageOffset: number
    type: string
    valueType: GridHeader.valueType
}

export namespace GridHeader {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type GridResponse = {
    listGrid: Grid
    pager: Pager
}

export type Group = {
    dataElementCount: number
    description: string
    fields: Array<Field>
    label: string
    /**
     * keys are class java.lang.Object
     */
    metaData: Record<string, Record<string, any>>
}

export type HttpBasicAuth = {
    password: string
    type: string
    username: string
}

export type I18nLocale = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    locale: string
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type I18nOutput = {
    translations: Record<string, string>
}

export type Icon = {
    type: Icon.type
}

export namespace Icon {
    export enum type {
        DATA_ITEM = "DATA_ITEM",
    }
}

export type IconData = {
    description: string
    href: string
    key: string
    keywords: Array<string>
}

export type IdentifiableObject = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: number
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    uid: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type IdentifiableObjects = {
    additions: Array<BaseIdentifiableObject>
    deletions: Array<BaseIdentifiableObject>
    identifiableObjects: Array<BaseIdentifiableObject>
}

export type IdObject = {
    id: string
    name: string
}

export type IdScheme = {
    attribute: boolean
    identifiableProperty: IdScheme.identifiableProperty
    identifiableString: string
    notNull: boolean
    null: boolean
}

export namespace IdScheme {
    export enum identifiableProperty {
        ID = "ID",
        UID = "UID",
        UUID = "UUID",
        NAME = "NAME",
        CODE = "CODE",
        ATTRIBUTE = "ATTRIBUTE",
    }
}

export type IdSchemes = {
    attributeOptionComboIdScheme: IdScheme
    categoryIdScheme: IdScheme
    categoryOptionComboIdScheme: IdScheme
    categoryOptionIdScheme: IdScheme
    dataElementGroupIdScheme: IdScheme
    dataElementIdScheme: IdScheme
    dataSetIdScheme: IdScheme
    idScheme: IdScheme
    orgUnitGroupIdScheme: IdScheme
    orgUnitIdScheme: IdScheme
    programIdScheme: IdScheme
    programStageIdScheme: IdScheme
    programStageInstanceIdScheme: IdScheme
    trackedEntityAttributeIdScheme: IdScheme
    trackedEntityIdScheme: IdScheme
}

export type ImageResource = {
    caption: string
    created: string
    description: string
    id: string
    imageUrl: string
    lastUpdated: string
    logo: boolean
}

export type ImportConflict = {
    errorCode: ImportConflict.errorCode
    indexes: Array<number>
    object: string
    objects: Record<string, string>
    property: string
    value: string
}

export namespace ImportConflict {
    export enum errorCode {
        E1000 = "E1000",
        E1001 = "E1001",
        E1002 = "E1002",
        E1003 = "E1003",
        E1004 = "E1004",
        E1005 = "E1005",
        E1006 = "E1006",
        E1100 = "E1100",
        E1101 = "E1101",
        E1102 = "E1102",
        E1103 = "E1103",
        E1104 = "E1104",
        E1105 = "E1105",
        E1106 = "E1106",
        E1107 = "E1107",
        E1108 = "E1108",
        E1109 = "E1109",
        E1110 = "E1110",
        E1111 = "E1111",
        E1112 = "E1112",
        E1113 = "E1113",
        E1114 = "E1114",
        E1115 = "E1115",
        E1116 = "E1116",
        E1117 = "E1117",
        E1118 = "E1118",
        E1119 = "E1119",
        E1120 = "E1120",
        E1500 = "E1500",
        E1501 = "E1501",
        E1502 = "E1502",
        E1503 = "E1503",
        E1504 = "E1504",
        E1510 = "E1510",
        E1511 = "E1511",
        E1512 = "E1512",
        E1513 = "E1513",
        E1514 = "E1514",
        E1515 = "E1515",
        E1516 = "E1516",
        E1520 = "E1520",
        E1521 = "E1521",
        E1522 = "E1522",
        E1523 = "E1523",
        E2000 = "E2000",
        E2001 = "E2001",
        E2002 = "E2002",
        E2003 = "E2003",
        E2004 = "E2004",
        E2005 = "E2005",
        E2006 = "E2006",
        E2007 = "E2007",
        E2008 = "E2008",
        E2009 = "E2009",
        E2010 = "E2010",
        E2011 = "E2011",
        E2012 = "E2012",
        E2013 = "E2013",
        E2014 = "E2014",
        E2015 = "E2015",
        E2016 = "E2016",
        E2017 = "E2017",
        E2018 = "E2018",
        E2019 = "E2019",
        E2020 = "E2020",
        E2021 = "E2021",
        E2022 = "E2022",
        E2023 = "E2023",
        E2024 = "E2024",
        E2025 = "E2025",
        E2026 = "E2026",
        E2027 = "E2027",
        E2028 = "E2028",
        E2029 = "E2029",
        E2030 = "E2030",
        E2031 = "E2031",
        E2032 = "E2032",
        E2033 = "E2033",
        E2034 = "E2034",
        E2035 = "E2035",
        E2036 = "E2036",
        E2037 = "E2037",
        E2038 = "E2038",
        E2039 = "E2039",
        E2040 = "E2040",
        E2041 = "E2041",
        E2042 = "E2042",
        E2043 = "E2043",
        E2044 = "E2044",
        E2200 = "E2200",
        E2201 = "E2201",
        E2202 = "E2202",
        E2203 = "E2203",
        E2204 = "E2204",
        E2205 = "E2205",
        E2206 = "E2206",
        E2207 = "E2207",
        E2208 = "E2208",
        E2300 = "E2300",
        E2301 = "E2301",
        E3000 = "E3000",
        E3001 = "E3001",
        E3002 = "E3002",
        E3003 = "E3003",
        E3004 = "E3004",
        E3005 = "E3005",
        E3006 = "E3006",
        E3008 = "E3008",
        E3009 = "E3009",
        E3010 = "E3010",
        E3011 = "E3011",
        E3012 = "E3012",
        E3013 = "E3013",
        E3014 = "E3014",
        E3015 = "E3015",
        E3016 = "E3016",
        E3017 = "E3017",
        E3018 = "E3018",
        E3019 = "E3019",
        E3020 = "E3020",
        E3021 = "E3021",
        E3022 = "E3022",
        E3023 = "E3023",
        E3024 = "E3024",
        E3025 = "E3025",
        E3026 = "E3026",
        E3027 = "E3027",
        E3028 = "E3028",
        E3029 = "E3029",
        E3030 = "E3030",
        E3031 = "E3031",
        E3032 = "E3032",
        E3040 = "E3040",
        E4000 = "E4000",
        E4001 = "E4001",
        E4002 = "E4002",
        E4003 = "E4003",
        E4004 = "E4004",
        E4005 = "E4005",
        E4006 = "E4006",
        E4007 = "E4007",
        E4008 = "E4008",
        E4009 = "E4009",
        E4010 = "E4010",
        E4011 = "E4011",
        E4012 = "E4012",
        E4013 = "E4013",
        E4014 = "E4014",
        E4015 = "E4015",
        E4016 = "E4016",
        E4017 = "E4017",
        E4018 = "E4018",
        E4019 = "E4019",
        E4020 = "E4020",
        E4021 = "E4021",
        E4022 = "E4022",
        E4023 = "E4023",
        E4024 = "E4024",
        E4025 = "E4025",
        E4026 = "E4026",
        E4027 = "E4027",
        E4028 = "E4028",
        E4029 = "E4029",
        E4030 = "E4030",
        E4031 = "E4031",
        E4032 = "E4032",
        E4033 = "E4033",
        E4034 = "E4034",
        E4035 = "E4035",
        E4036 = "E4036",
        E4037 = "E4037",
        E4038 = "E4038",
        E4039 = "E4039",
        E4040 = "E4040",
        E4041 = "E4041",
        E4042 = "E4042",
        E4043 = "E4043",
        E4044 = "E4044",
        E4045 = "E4045",
        E4046 = "E4046",
        E4047 = "E4047",
        E4048 = "E4048",
        E4049 = "E4049",
        E4054 = "E4054",
        E4056 = "E4056",
        E4055 = "E4055",
        E4050 = "E4050",
        E4051 = "E4051",
        E4052 = "E4052",
        E4053 = "E4053",
        E4057 = "E4057",
        E4060 = "E4060",
        E4061 = "E4061",
        E4062 = "E4062",
        E4063 = "E4063",
        E4064 = "E4064",
        E4065 = "E4065",
        E4066 = "E4066",
        E4067 = "E4067",
        E4068 = "E4068",
        E4300 = "E4300",
        E4301 = "E4301",
        E4302 = "E4302",
        E4303 = "E4303",
        E4304 = "E4304",
        E4305 = "E4305",
        E4306 = "E4306",
        E4307 = "E4307",
        E4308 = "E4308",
        E4309 = "E4309",
        E4310 = "E4310",
        E4311 = "E4311",
        E4312 = "E4312",
        E4313 = "E4313",
        E4314 = "E4314",
        E4315 = "E4315",
        E5000 = "E5000",
        E5001 = "E5001",
        E5002 = "E5002",
        E5003 = "E5003",
        E5004 = "E5004",
        E5005 = "E5005",
        E5006 = "E5006",
        E5007 = "E5007",
        E6000 = "E6000",
        E6001 = "E6001",
        E6002 = "E6002",
        E6003 = "E6003",
        E6004 = "E6004",
        E6005 = "E6005",
        E6006 = "E6006",
        E6007 = "E6007",
        E6008 = "E6008",
        E6009 = "E6009",
        E6010 = "E6010",
        E6011 = "E6011",
        E6012 = "E6012",
        E6013 = "E6013",
        E6014 = "E6014",
        E6015 = "E6015",
        E6016 = "E6016",
        E6017 = "E6017",
        E6018 = "E6018",
        E6019 = "E6019",
        E6020 = "E6020",
        E6021 = "E6021",
        E6100 = "E6100",
        E6101 = "E6101",
        E6200 = "E6200",
        E6201 = "E6201",
        E6202 = "E6202",
        E6203 = "E6203",
        E6204 = "E6204",
        E6205 = "E6205",
        E6206 = "E6206",
        E6207 = "E6207",
        E6208 = "E6208",
        E6209 = "E6209",
        E6210 = "E6210",
        E6211 = "E6211",
        E6300 = "E6300",
        E6301 = "E6301",
        E6302 = "E6302",
        E6303 = "E6303",
        E6304 = "E6304",
        E6305 = "E6305",
        E7000 = "E7000",
        E7003 = "E7003",
        E7004 = "E7004",
        E7005 = "E7005",
        E7006 = "E7006",
        E7007 = "E7007",
        E7010 = "E7010",
        E7020 = "E7020",
        E7021 = "E7021",
        E7022 = "E7022",
        E7023 = "E7023",
        E7024 = "E7024",
        E7100 = "E7100",
        E7101 = "E7101",
        E7102 = "E7102",
        E7103 = "E7103",
        E7104 = "E7104",
        E7105 = "E7105",
        E7106 = "E7106",
        E7107 = "E7107",
        E7108 = "E7108",
        E7109 = "E7109",
        E7110 = "E7110",
        E7111 = "E7111",
        E7112 = "E7112",
        E7113 = "E7113",
        E7114 = "E7114",
        E7115 = "E7115",
        E7116 = "E7116",
        E7117 = "E7117",
        E7118 = "E7118",
        E7119 = "E7119",
        E7120 = "E7120",
        E7121 = "E7121",
        E7122 = "E7122",
        E7123 = "E7123",
        E7124 = "E7124",
        E7125 = "E7125",
        E7126 = "E7126",
        E7127 = "E7127",
        E7128 = "E7128",
        E7129 = "E7129",
        E7130 = "E7130",
        E7131 = "E7131",
        E7132 = "E7132",
        E7133 = "E7133",
        E7134 = "E7134",
        E7135 = "E7135",
        E7200 = "E7200",
        E7201 = "E7201",
        E7202 = "E7202",
        E7203 = "E7203",
        E7204 = "E7204",
        E7205 = "E7205",
        E7206 = "E7206",
        E7207 = "E7207",
        E7208 = "E7208",
        E7209 = "E7209",
        E7210 = "E7210",
        E7211 = "E7211",
        E7212 = "E7212",
        E7213 = "E7213",
        E7214 = "E7214",
        E7215 = "E7215",
        E7216 = "E7216",
        E7217 = "E7217",
        E7218 = "E7218",
        E7219 = "E7219",
        E7220 = "E7220",
        E7221 = "E7221",
        E7222 = "E7222",
        E7223 = "E7223",
        E7224 = "E7224",
        E7225 = "E7225",
        E7226 = "E7226",
        E7227 = "E7227",
        E7228 = "E7228",
        E7229 = "E7229",
        E7230 = "E7230",
        E7231 = "E7231",
        E7232 = "E7232",
        E7234 = "E7234",
        E7300 = "E7300",
        E7301 = "E7301",
        E7400 = "E7400",
        E7500 = "E7500",
        E7501 = "E7501",
        E7502 = "E7502",
        E7503 = "E7503",
        E7600 = "E7600",
        E7601 = "E7601",
        E7602 = "E7602",
        E7603 = "E7603",
        E7604 = "E7604",
        E7610 = "E7610",
        E7611 = "E7611",
        E7612 = "E7612",
        E7613 = "E7613",
        E7614 = "E7614",
        E7615 = "E7615",
        E7616 = "E7616",
        E7617 = "E7617",
        E7618 = "E7618",
        E7619 = "E7619",
        E7620 = "E7620",
        E7621 = "E7621",
        E7630 = "E7630",
        E7631 = "E7631",
        E7632 = "E7632",
        E7633 = "E7633",
        E7634 = "E7634",
        E7635 = "E7635",
        E7636 = "E7636",
        E7637 = "E7637",
        E7638 = "E7638",
        E7639 = "E7639",
        E7640 = "E7640",
        E7641 = "E7641",
        E7642 = "E7642",
        E7643 = "E7643",
        E7644 = "E7644",
        E7645 = "E7645",
        E7650 = "E7650",
        E7651 = "E7651",
        E7652 = "E7652",
        E7653 = "E7653",
        E7700 = "E7700",
        E7701 = "E7701",
        E7702 = "E7702",
        E7703 = "E7703",
        E7704 = "E7704",
        E7705 = "E7705",
        E7706 = "E7706",
        E7707 = "E7707",
        E7708 = "E7708",
        E7709 = "E7709",
        E7710 = "E7710",
        E7711 = "E7711",
        E7712 = "E7712",
    }
}

export type ImportConflicts = {
    conflictCount: number
    conflicts: Array<ImportConflict>
    conflictsDescription: string
    totalConflictOccurrenceCount: number
}

export type ImportCount = {
    deleted: number
    ignored: number
    imported: number
    updated: number
}

export type ImportOptions = {
    async: boolean
    dataSet: string
    datasetAllowsPeriods: boolean
    dryRun: boolean
    filename: string
    firstRowIsHeader: boolean
    force: boolean
    idSchemes: IdSchemes
    ignoreEmptyCollection: boolean
    importStrategy: ImportOptions.importStrategy
    mergeDataValues: boolean
    mergeMode: ImportOptions.mergeMode
    notificationLevel: ImportOptions.notificationLevel
    preheatCache: boolean
    reportMode: ImportOptions.reportMode
    requireAttributeOptionCombo: boolean
    requireCategoryOptionCombo: boolean
    sharing: boolean
    skipAudit: boolean
    skipCache: boolean
    skipExistingCheck: boolean
    skipLastUpdated: boolean
    skipNotifications: boolean
    skipPatternValidation: boolean
    strictAttributeOptionCombos: boolean
    strictCategoryOptionCombos: boolean
    strictDataElements: boolean
    strictDataSetApproval: boolean
    strictDataSetInputPeriods: boolean
    strictDataSetLocking: boolean
    strictOrganisationUnits: boolean
    strictPeriods: boolean
}

export namespace ImportOptions {
    export enum importStrategy {
        CREATE = "CREATE",
        UPDATE = "UPDATE",
        CREATE_AND_UPDATE = "CREATE_AND_UPDATE",
        DELETE = "DELETE",
        SYNC = "SYNC",
        NEW_AND_UPDATES = "NEW_AND_UPDATES",
        NEW = "NEW",
        UPDATES = "UPDATES",
        DELETES = "DELETES",
    }

    export enum mergeMode {
        MERGE_ALWAYS = "MERGE_ALWAYS",
        MERGE_IF_NOT_NULL = "MERGE_IF_NOT_NULL",
        MERGE = "MERGE",
        REPLACE = "REPLACE",
        NONE = "NONE",
    }

    export enum notificationLevel {
        OFF = "OFF",
        DEBUG = "DEBUG",
        LOOP = "LOOP",
        INFO = "INFO",
        WARN = "WARN",
        ERROR = "ERROR",
    }

    export enum reportMode {
        FULL = "FULL",
        ERRORS = "ERRORS",
        ERRORS_NOT_OWNER = "ERRORS_NOT_OWNER",
        DEBUG = "DEBUG",
    }
}

export type ImportReport = {
    importParams: MetadataImportParams
    stats: Stats
    status: ImportReport.status
    typeReports: Array<TypeReport>
}

export namespace ImportReport {
    export enum status {
        OK = "OK",
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
}

export type ImportSummaries = {
    deleted: number
    ignored: number
    importOptions: ImportOptions
    importSummaries: Array<ImportSummary>
    imported: number
    responseType: string
    status: ImportSummaries.status
    total: number
    updated: number
}

export namespace ImportSummaries {
    export enum status {
        SUCCESS = "SUCCESS",
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
}

export type ImportSummary = {
    conflicts: Array<ImportConflict>
    dataSetComplete: string
    description: string
    enrollments: ImportSummaries
    events: ImportSummaries
    href: string
    importCount: ImportCount
    importOptions: ImportOptions
    reference: string
    relationships: ImportSummaries
    responseType: string
    status: ImportSummary.status
}

export namespace ImportSummary {
    export enum status {
        SUCCESS = "SUCCESS",
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
}

export type IncomingSms = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    gatewayid: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    originator: string
    publicAccess: string
    receiveddate: string
    sentdate: string
    sharing: Sharing
    smsencoding: IncomingSms.smsencoding
    smsstatus: IncomingSms.smsstatus
    text: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace IncomingSms {
    export enum smsencoding {
        ENC7BIT = "ENC7BIT",
        ENC8BIT = "ENC8BIT",
        ENCUCS2 = "ENCUCS2",
        ENCCUSTOM = "ENCCUSTOM",
    }

    export enum smsstatus {
        INCOMING = "INCOMING",
        PROCESSING = "PROCESSING",
        UNHANDLED = "UNHANDLED",
        FAILED = "FAILED",
        PROCESSED = "PROCESSED",
        SENT = "SENT",
    }
}

export type IndexResource = {
    displayName: string
    href: string
    plural: string
    singular: string
}

export type IndexResources = {
    resources: Array<IndexResource>
}

export type Indicator = {
    access: Access
    aggregateExportAttributeOptionCombo: string
    aggregateExportCategoryOptionCombo: string
    aggregationType: Indicator.aggregationType
    annualized: boolean
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataSets: Array<DataSet>
    decimals: number
    denominator: string
    denominatorDescription: string
    description: string
    dimensionItem: string
    displayDenominatorDescription: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayNumeratorDescription: string
    displayShortName: string
    explodedDenominator: string
    explodedNumerator: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    indicatorGroups: Array<IndicatorGroup>
    indicatorType: IndicatorType
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    numerator: string
    numeratorDescription: string
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    style: ObjectStyle
    translations: Array<Translation>
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace Indicator {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }
}

export type IndicatorGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    groupSets: Array<IndicatorGroupSet>
    href: string
    id: string
    indicatorGroupSet: IndicatorGroupSet
    indicators: Array<Indicator>
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type IndicatorGroupSet = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    compulsory: boolean
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    indicatorGroups: Array<IndicatorGroup>
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type IndicatorType = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    factor: number
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    number: boolean
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type Interpretation = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    comments: Array<Ref_InterpretationComment>
    created: string
    createdBy: User
    dataSet: DataSet
    displayName: string
    eventChart: Ref_EventChart
    eventReport: Ref_EventReport
    eventVisualization: EventVisualization
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    likedBy: Array<User>
    likes: number
    map: Map
    mentions: Array<Mention>
    organisationUnit: OrganisationUnit
    period: string
    publicAccess: string
    sharing: Sharing
    text: string
    translations: Array<Translation>
    type: Interpretation.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    visualization: Visualization
}

export namespace Interpretation {
    export enum type {
        VISUALIZATION = "VISUALIZATION",
        EVENT_VISUALIZATION = "EVENT_VISUALIZATION",
        MAP = "MAP",
        EVENT_REPORT = "EVENT_REPORT",
        EVENT_CHART = "EVENT_CHART",
        DATASET_REPORT = "DATASET_REPORT",
    }
}

export type IpAllowedList = {
    allowedIps: Array<string>
    type: string
}

export type Item = {
    complete: boolean
    completedTime: string
    description: string
    duration: number
    error: string
    onFailure: Item.onFailure
    status: Item.status
    summary: string
}

export namespace Item {
    export enum onFailure {
        PARENT = "PARENT",
        FAIL = "FAIL",
        SKIP_STAGE = "SKIP_STAGE",
        SKIP_ITEM = "SKIP_ITEM",
        SKIP_ITEM_OUTLIER = "SKIP_ITEM_OUTLIER",
    }

    export enum status {
        RUNNING = "RUNNING",
        SUCCESS = "SUCCESS",
        ERROR = "ERROR",
        CANCELLED = "CANCELLED",
    }
}

export type ItemConfig = {
    insertHeight: number
    insertPosition: ItemConfig.insertPosition
}

export namespace ItemConfig {
    export enum insertPosition {
        START = "START",
        END = "END",
    }
}

export type JmsTarget = {
    address: string
    brokerUrl: string
    clientId: string
    groupId: string
    password: string
    type: string
    useQueue: boolean
    username: string
}

export type JobConfiguration = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    configurable: boolean
    created: string
    createdBy: User
    cronExpression: string
    delay: number
    displayName: string
    enabled: boolean
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    jobParameters:
        | AnalyticsJobParameters
        | ContinuousAnalyticsJobParameters
        | MonitoringJobParameters
        | PredictorJobParameters
        | PushAnalysisJobParameters
        | SmsJobParameters
        | MetadataSyncJobParameters
        | EventProgramsDataSynchronizationJobParameters
        | TrackerProgramsDataSynchronizationJobParameters
        | DataSynchronizationJobParameters
        | DisableInactiveUsersJobParameters
        | TrackerTrigramIndexJobParameters
        | DataIntegrityJobParameters
        | AggregateDataExchangeJobParameters
        | SqlViewUpdateParameters
        | TestJobParameters
    jobStatus: JobConfiguration.jobStatus
    jobType: JobConfiguration.jobType
    lastExecuted: string
    lastExecutedStatus: JobConfiguration.lastExecutedStatus
    lastRuntimeExecution: string
    lastUpdated: string
    lastUpdatedBy: User
    leaderOnlyJob: boolean
    name: string
    nextExecutionTime: string
    publicAccess: string
    schedulingType: JobConfiguration.schedulingType
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    userUid: string
}

export namespace JobConfiguration {
    export enum jobStatus {
        RUNNING = "RUNNING",
        COMPLETED = "COMPLETED",
        STOPPED = "STOPPED",
        SCHEDULED = "SCHEDULED",
        DISABLED = "DISABLED",
        FAILED = "FAILED",
        NOT_STARTED = "NOT_STARTED",
    }

    export enum jobType {
        DATA_STATISTICS = "DATA_STATISTICS",
        DATA_INTEGRITY = "DATA_INTEGRITY",
        RESOURCE_TABLE = "RESOURCE_TABLE",
        ANALYTICS_TABLE = "ANALYTICS_TABLE",
        CONTINUOUS_ANALYTICS_TABLE = "CONTINUOUS_ANALYTICS_TABLE",
        DATA_SYNC = "DATA_SYNC",
        TRACKER_PROGRAMS_DATA_SYNC = "TRACKER_PROGRAMS_DATA_SYNC",
        EVENT_PROGRAMS_DATA_SYNC = "EVENT_PROGRAMS_DATA_SYNC",
        FILE_RESOURCE_CLEANUP = "FILE_RESOURCE_CLEANUP",
        IMAGE_PROCESSING = "IMAGE_PROCESSING",
        META_DATA_SYNC = "META_DATA_SYNC",
        AGGREGATE_DATA_EXCHANGE = "AGGREGATE_DATA_EXCHANGE",
        SMS_SEND = "SMS_SEND",
        SEND_SCHEDULED_MESSAGE = "SEND_SCHEDULED_MESSAGE",
        PROGRAM_NOTIFICATIONS = "PROGRAM_NOTIFICATIONS",
        VALIDATION_RESULTS_NOTIFICATION = "VALIDATION_RESULTS_NOTIFICATION",
        CREDENTIALS_EXPIRY_ALERT = "CREDENTIALS_EXPIRY_ALERT",
        MONITORING = "MONITORING",
        PUSH_ANALYSIS = "PUSH_ANALYSIS",
        TRACKER_SEARCH_OPTIMIZATION = "TRACKER_SEARCH_OPTIMIZATION",
        PREDICTOR = "PREDICTOR",
        DATA_SET_NOTIFICATION = "DATA_SET_NOTIFICATION",
        REMOVE_USED_OR_EXPIRED_RESERVED_VALUES = "REMOVE_USED_OR_EXPIRED_RESERVED_VALUES",
        TRACKER_IMPORT_JOB = "TRACKER_IMPORT_JOB",
        TRACKER_IMPORT_NOTIFICATION_JOB = "TRACKER_IMPORT_NOTIFICATION_JOB",
        TRACKER_IMPORT_RULE_ENGINE_JOB = "TRACKER_IMPORT_RULE_ENGINE_JOB",
        MATERIALIZED_SQL_VIEW_UPDATE = "MATERIALIZED_SQL_VIEW_UPDATE",
        LEADER_ELECTION = "LEADER_ELECTION",
        LEADER_RENEWAL = "LEADER_RENEWAL",
        COMPLETE_DATA_SET_REGISTRATION_IMPORT = "COMPLETE_DATA_SET_REGISTRATION_IMPORT",
        DATAVALUE_IMPORT_INTERNAL = "DATAVALUE_IMPORT_INTERNAL",
        METADATA_IMPORT = "METADATA_IMPORT",
        DATAVALUE_IMPORT = "DATAVALUE_IMPORT",
        GEOJSON_IMPORT = "GEOJSON_IMPORT",
        EVENT_IMPORT = "EVENT_IMPORT",
        ENROLLMENT_IMPORT = "ENROLLMENT_IMPORT",
        TEI_IMPORT = "TEI_IMPORT",
        DISABLE_INACTIVE_USERS = "DISABLE_INACTIVE_USERS",
        ACCOUNT_EXPIRY_ALERT = "ACCOUNT_EXPIRY_ALERT",
        SYSTEM_VERSION_UPDATE_CHECK = "SYSTEM_VERSION_UPDATE_CHECK",
        TEST = "TEST",
        MOCK = "MOCK",
        GML_IMPORT = "GML_IMPORT",
        ANALYTICSTABLE_UPDATE = "ANALYTICSTABLE_UPDATE",
        PROGRAM_DATA_SYNC = "PROGRAM_DATA_SYNC",
    }

    export enum lastExecutedStatus {
        RUNNING = "RUNNING",
        COMPLETED = "COMPLETED",
        STOPPED = "STOPPED",
        SCHEDULED = "SCHEDULED",
        DISABLED = "DISABLED",
        FAILED = "FAILED",
        NOT_STARTED = "NOT_STARTED",
    }

    export enum schedulingType {
        CRON = "CRON",
        FIXED_DELAY = "FIXED_DELAY",
    }
}

export type JobTypeInfo = {
    jobParameters: Array<Property>
    jobType: JobTypeInfo.jobType
    name: string
    schedulingType: JobTypeInfo.schedulingType
}

export namespace JobTypeInfo {
    export enum jobType {
        DATA_STATISTICS = "DATA_STATISTICS",
        DATA_INTEGRITY = "DATA_INTEGRITY",
        RESOURCE_TABLE = "RESOURCE_TABLE",
        ANALYTICS_TABLE = "ANALYTICS_TABLE",
        CONTINUOUS_ANALYTICS_TABLE = "CONTINUOUS_ANALYTICS_TABLE",
        DATA_SYNC = "DATA_SYNC",
        TRACKER_PROGRAMS_DATA_SYNC = "TRACKER_PROGRAMS_DATA_SYNC",
        EVENT_PROGRAMS_DATA_SYNC = "EVENT_PROGRAMS_DATA_SYNC",
        FILE_RESOURCE_CLEANUP = "FILE_RESOURCE_CLEANUP",
        IMAGE_PROCESSING = "IMAGE_PROCESSING",
        META_DATA_SYNC = "META_DATA_SYNC",
        AGGREGATE_DATA_EXCHANGE = "AGGREGATE_DATA_EXCHANGE",
        SMS_SEND = "SMS_SEND",
        SEND_SCHEDULED_MESSAGE = "SEND_SCHEDULED_MESSAGE",
        PROGRAM_NOTIFICATIONS = "PROGRAM_NOTIFICATIONS",
        VALIDATION_RESULTS_NOTIFICATION = "VALIDATION_RESULTS_NOTIFICATION",
        CREDENTIALS_EXPIRY_ALERT = "CREDENTIALS_EXPIRY_ALERT",
        MONITORING = "MONITORING",
        PUSH_ANALYSIS = "PUSH_ANALYSIS",
        TRACKER_SEARCH_OPTIMIZATION = "TRACKER_SEARCH_OPTIMIZATION",
        PREDICTOR = "PREDICTOR",
        DATA_SET_NOTIFICATION = "DATA_SET_NOTIFICATION",
        REMOVE_USED_OR_EXPIRED_RESERVED_VALUES = "REMOVE_USED_OR_EXPIRED_RESERVED_VALUES",
        TRACKER_IMPORT_JOB = "TRACKER_IMPORT_JOB",
        TRACKER_IMPORT_NOTIFICATION_JOB = "TRACKER_IMPORT_NOTIFICATION_JOB",
        TRACKER_IMPORT_RULE_ENGINE_JOB = "TRACKER_IMPORT_RULE_ENGINE_JOB",
        MATERIALIZED_SQL_VIEW_UPDATE = "MATERIALIZED_SQL_VIEW_UPDATE",
        LEADER_ELECTION = "LEADER_ELECTION",
        LEADER_RENEWAL = "LEADER_RENEWAL",
        COMPLETE_DATA_SET_REGISTRATION_IMPORT = "COMPLETE_DATA_SET_REGISTRATION_IMPORT",
        DATAVALUE_IMPORT_INTERNAL = "DATAVALUE_IMPORT_INTERNAL",
        METADATA_IMPORT = "METADATA_IMPORT",
        DATAVALUE_IMPORT = "DATAVALUE_IMPORT",
        GEOJSON_IMPORT = "GEOJSON_IMPORT",
        EVENT_IMPORT = "EVENT_IMPORT",
        ENROLLMENT_IMPORT = "ENROLLMENT_IMPORT",
        TEI_IMPORT = "TEI_IMPORT",
        DISABLE_INACTIVE_USERS = "DISABLE_INACTIVE_USERS",
        ACCOUNT_EXPIRY_ALERT = "ACCOUNT_EXPIRY_ALERT",
        SYSTEM_VERSION_UPDATE_CHECK = "SYSTEM_VERSION_UPDATE_CHECK",
        TEST = "TEST",
        MOCK = "MOCK",
        GML_IMPORT = "GML_IMPORT",
        ANALYTICSTABLE_UPDATE = "ANALYTICSTABLE_UPDATE",
        PROGRAM_DATA_SYNC = "PROGRAM_DATA_SYNC",
    }

    export enum schedulingType {
        CRON = "CRON",
        FIXED_DELAY = "FIXED_DELAY",
    }
}

export type JobTypes = {
    jobTypes: Array<JobTypeInfo>
}

export type JsonPatch = {
    operations: Array<
        AddOperation | RemoveOperation | RemoveByIdOperation | ReplaceOperation
    >
}

export type JsonRoot = {
    properties: Record<string, Record<string, any>>
}

export type KafkaTarget = {
    bootstrapServers: string
    clientId: string
    password: string
    topic: string
    type: string
    username: string
}

export type Keyword = {
    key: string
    metadataItem: MetadataItem
}

export type Layout = {
    columns: Array<Column>
    spacing: Spacing
}

export type LeaderNodeInfo = {
    currentNodeId: string
    currentNodeUuid: string
    leader: boolean
    leaderNodeId: string
    leaderNodeUuid: string
}

export type LegendDefinitions = {
    set: LegendSet
    showKey: boolean
    strategy: LegendDefinitions.strategy
    style: LegendDefinitions.style
}

export namespace LegendDefinitions {
    export enum strategy {
        FIXED = "FIXED",
        BY_DATA_ITEM = "BY_DATA_ITEM",
    }

    export enum style {
        FILL = "FILL",
        TEXT = "TEXT",
    }
}

export type LegendSet = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legends: Array<Ref_Legend>
    name: string
    publicAccess: string
    sharing: Sharing
    symbolizer: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type Line = {
    title: StyledObject
    value: number
}

export type LockExceptionDto = {
    dataSet: string
    orgUnit: string
    period: string
}

export type LockExceptionsDto = {
    lockExceptions: Array<LockExceptionDto>
}

export type Map = {
    access: Access
    attributeValues: Array<AttributeValue>
    basemap: string
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    interpretations: Array<Interpretation>
    lastUpdated: string
    lastUpdatedBy: User
    latitude: number
    longitude: number
    mapViews: Array<MapView>
    name: string
    publicAccess: string
    sharing: Sharing
    shortName: string
    subscribed: boolean
    subscribers: Array<string>
    title: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    zoom: number
}

export type MapView = {
    access: Access
    aggregationType: MapView.aggregationType
    areaRadius: number
    attributeDimensions: Array<TrackedEntityAttributeDimension>
    attributeValues: Array<AttributeValue>
    categoryDimensions: Array<CategoryDimension>
    categoryOptionGroupSetDimensions: Array<CategoryOptionGroupSetDimension>
    classes: number
    code: string
    colorHigh: string
    colorLow: string
    colorScale: string
    columnDimensions: Array<string>
    columns: Array<DimensionalObject>
    completedOnly: boolean
    config: string
    created: string
    createdBy: User
    dataDimensionItems: Array<DataDimensionItem>
    dataElementDimensions: Array<TrackedEntityDataElementDimension>
    dataElementGroupSetDimensions: Array<DataElementGroupSetDimension>
    description: string
    digitGroupSeparator: MapView.digitGroupSeparator
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    displaySubtitle: string
    displayTitle: string
    endDate: string
    eventClustering: boolean
    eventCoordinateField: string
    eventPointColor: string
    eventPointRadius: number
    eventStatus: MapView.eventStatus
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filterDimensions: Array<string>
    filters: Array<DimensionalObject>
    followUp: boolean
    formName: string
    hidden: boolean
    hideSubtitle: boolean
    hideTitle: boolean
    href: string
    id: string
    interpretations: Array<Interpretation>
    itemOrganisationUnitGroups: Array<OrganisationUnitGroup>
    labelFontColor: string
    labelFontSize: string
    labelFontStyle: string
    labelFontWeight: string
    labelTemplate: string
    labels: boolean
    lastUpdated: string
    lastUpdatedBy: User
    layer: string
    legendSet: LegendSet
    method: number
    noDataColor: string
    opacity: number
    orgUnitField: string
    orgUnitFieldDisplayName: string
    organisationUnitColor: string
    organisationUnitGroupSet: OrganisationUnitGroupSet
    organisationUnitGroupSetDimensions: Array<OrganisationUnitGroupSetDimension>
    organisationUnitLevels: Array<number>
    organisationUnitSelectionMode: MapView.organisationUnitSelectionMode
    organisationUnits: Array<OrganisationUnit>
    parentGraph: string
    parentGraphMap: Record<string, string>
    parentLevel: number
    periods: Array<string>
    program: Program
    programIndicatorDimensions: Array<TrackedEntityProgramIndicatorDimension>
    programStage: ProgramStage
    programStatus: MapView.programStatus
    publicAccess: string
    radiusHigh: number
    radiusLow: number
    relativePeriods: RelativePeriods
    renderingStrategy: MapView.renderingStrategy
    rows: Array<DimensionalObject>
    sharing: Sharing
    shortName: string
    sortOrder: number
    startDate: string
    /**
     * The actual type is unknown.
     * (Java type was: `class java.lang.Object`)
     */
    styleDataItem: Record<string, any>
    subscribed: boolean
    subscribers: Array<string>
    subtitle: string
    thematicMapType: MapView.thematicMapType
    timeField: string
    title: string
    topLimit: number
    trackedEntityType: TrackedEntityType
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    userOrgUnitType: MapView.userOrgUnitType
    userOrganisationUnit: boolean
    userOrganisationUnitChildren: boolean
    userOrganisationUnitGrandChildren: boolean
}

export namespace MapView {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum digitGroupSeparator {
        COMMA = "COMMA",
        SPACE = "SPACE",
        NONE = "NONE",
    }

    export enum eventStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }

    export enum organisationUnitSelectionMode {
        SELECTED = "SELECTED",
        CHILDREN = "CHILDREN",
        DESCENDANTS = "DESCENDANTS",
        ACCESSIBLE = "ACCESSIBLE",
        CAPTURE = "CAPTURE",
        ALL = "ALL",
    }

    export enum programStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }

    export enum renderingStrategy {
        SINGLE = "SINGLE",
        SPLIT_BY_PERIOD = "SPLIT_BY_PERIOD",
        TIMELINE = "TIMELINE",
    }

    export enum thematicMapType {
        CHOROPLETH = "CHOROPLETH",
        BUBBLE = "BUBBLE",
    }

    export enum userOrgUnitType {
        DATA_CAPTURE = "DATA_CAPTURE",
        DATA_OUTPUT = "DATA_OUTPUT",
        TEI_SEARCH = "TEI_SEARCH",
    }
}

export type CurrentUser = {
    access: Access
    authorities: Array<string>
    avatar: FileResource
    birthday: string
    created: string
    dataSets: Array<string>
    dataViewOrganisationUnits: Array<OrganisationUnit>
    displayName: string
    education: string
    email: string
    employer: string
    externalAccess: boolean
    facebookMessenger: string
    favorites: Array<string>
    firstName: string
    gender: string
    id: string
    impersonation: string
    interests: string
    introduction: string
    jobTitle: string
    languages: string
    lastUpdated: string
    name: string
    nationality: string
    organisationUnits: Array<OrganisationUnit>
    phoneNumber: string
    programs: Array<string>
    settings: Record<string, string | number | boolean>
    sharing: Sharing
    skype: string
    surname: string
    teiSearchOrganisationUnits: Array<OrganisationUnit>
    telegram: string
    translations: Array<Translation>
    twitter: string
    userAccesses: Array<UserAccess>
    userCredentials: UserCredentialsDto
    userGroupAccesses: Array<UserGroupAccess>
    userGroups: Array<UserGroup>
    userRoles: Array<UserRole>
    username: string
    whatsApp: string
}

export type Mention = {
    created: string
    username: string
}

export type MergeObject = {
    enrollments: Array<string>
    relationships: Array<string>
    trackedEntityAttributes: Array<string>
}

export type MessageConversation = {
    access: Access
    assignee: User
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    extMessageId: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    followUp: boolean
    href: string
    id: string
    lastMessage: string
    lastSender: User
    lastSenderFirstname: string
    lastSenderSurname: string
    lastUpdated: string
    lastUpdatedBy: User
    messageCount: number
    messageType: MessageConversation.messageType
    messages: Array<Ref_Message>
    priority: MessageConversation.priority
    publicAccess: string
    read: boolean
    sharing: Sharing
    status: MessageConversation.status
    subject: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userFirstname: string
    userGroupAccesses: Array<UserGroupAccess>
    userMessages: Array<UserMessage>
    userSurname: string
}

export namespace MessageConversation {
    export enum messageType {
        PRIVATE = "PRIVATE",
        SYSTEM = "SYSTEM",
        VALIDATION_RESULT = "VALIDATION_RESULT",
        TICKET = "TICKET",
        SYSTEM_VERSION_UPDATE = "SYSTEM_VERSION_UPDATE",
    }

    export enum priority {
        NONE = "NONE",
        LOW = "LOW",
        MEDIUM = "MEDIUM",
        HIGH = "HIGH",
    }

    export enum status {
        NONE = "NONE",
        OPEN = "OPEN",
        PENDING = "PENDING",
        INVALID = "INVALID",
        SOLVED = "SOLVED",
    }
}

export type Meta = {
    allowExternalAccess: boolean
    allowPublicAccess: boolean
}

export type MetadataAdjustParams = {
    change: Record<string, any>
    targetId: string
}

export type MetadataExportParams = {
    classes: Array<string>
    defaultFields: Array<string>
    defaultFilter: Array<string>
    defaultOrder: Array<string>
    defaults: MetadataExportParams.defaults
    download: boolean
    exportWithDependencies: boolean
    inclusionStrategy: MetadataExportParams.inclusionStrategy
    objectExportWithDependencies: IdentifiableObject
    skipSharing: boolean
    user: User
    username: string
}

export namespace MetadataExportParams {
    export enum defaults {
        INCLUDE = "INCLUDE",
        EXCLUDE = "EXCLUDE",
    }

    export enum inclusionStrategy {
        ALWAYS = "ALWAYS",
        NON_NULL = "NON_NULL",
        NON_EMPTY = "NON_EMPTY",
    }
}

export type MetadataImportParams = {
    atomicMode: MetadataImportParams.atomicMode
    flushMode: MetadataImportParams.flushMode
    identifier: MetadataImportParams.identifier
    importMode: MetadataImportParams.importMode
    importReportMode: MetadataImportParams.importReportMode
    importStrategy: MetadataImportParams.importStrategy
    mergeMode: MetadataImportParams.mergeMode
    metadataSyncImport: boolean
    preheatMode: MetadataImportParams.preheatMode
    skipSharing: boolean
    skipTranslation: boolean
    skipValidation: boolean
    userOverrideMode: MetadataImportParams.userOverrideMode
}

export namespace MetadataImportParams {
    export enum atomicMode {
        ALL = "ALL",
        NONE = "NONE",
    }

    export enum flushMode {
        OBJECT = "OBJECT",
        AUTO = "AUTO",
    }

    export enum identifier {
        UID = "UID",
        CODE = "CODE",
    }

    export enum importMode {
        COMMIT = "COMMIT",
        VALIDATE = "VALIDATE",
    }

    export enum importReportMode {
        FULL = "FULL",
        ERRORS = "ERRORS",
        ERRORS_NOT_OWNER = "ERRORS_NOT_OWNER",
        DEBUG = "DEBUG",
    }

    export enum importStrategy {
        CREATE = "CREATE",
        UPDATE = "UPDATE",
        CREATE_AND_UPDATE = "CREATE_AND_UPDATE",
        DELETE = "DELETE",
        SYNC = "SYNC",
        NEW_AND_UPDATES = "NEW_AND_UPDATES",
        NEW = "NEW",
        UPDATES = "UPDATES",
        DELETES = "DELETES",
    }

    export enum mergeMode {
        MERGE_ALWAYS = "MERGE_ALWAYS",
        MERGE_IF_NOT_NULL = "MERGE_IF_NOT_NULL",
        MERGE = "MERGE",
        REPLACE = "REPLACE",
        NONE = "NONE",
    }

    export enum preheatMode {
        REFERENCE = "REFERENCE",
        ALL = "ALL",
        NONE = "NONE",
    }

    export enum userOverrideMode {
        NONE = "NONE",
        CURRENT = "CURRENT",
        SELECTED = "SELECTED",
    }
}

export type MetadataItem = {
    aggregationType: MetadataItem.aggregationType
    code: string
    description: string
    dimensionItemType: MetadataItem.dimensionItemType
    dimensionType: MetadataItem.dimensionType
    endDate: string
    expression: string
    indicatorType: IndicatorType
    legendSet: string
    name: string
    startDate: string
    style: ObjectStyle
    totalAggregationType: MetadataItem.totalAggregationType
    uid: string
    valueType: MetadataItem.valueType
}

export namespace MetadataItem {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dimensionItemType {
        DATA_ELEMENT = "DATA_ELEMENT",
        DATA_ELEMENT_OPERAND = "DATA_ELEMENT_OPERAND",
        INDICATOR = "INDICATOR",
        REPORTING_RATE = "REPORTING_RATE",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        PERIOD = "PERIOD",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        CATEGORY_OPTION = "CATEGORY_OPTION",
        OPTION_GROUP = "OPTION_GROUP",
        DATA_ELEMENT_GROUP = "DATA_ELEMENT_GROUP",
        ORGANISATION_UNIT_GROUP = "ORGANISATION_UNIT_GROUP",
        CATEGORY_OPTION_GROUP = "CATEGORY_OPTION_GROUP",
        EXPRESSION_DIMENSION_ITEM = "EXPRESSION_DIMENSION_ITEM",
    }

    export enum dimensionType {
        DATA_X = "DATA_X",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        DATA_COLLAPSED = "DATA_COLLAPSED",
        CATEGORY_OPTION_COMBO = "CATEGORY_OPTION_COMBO",
        ATTRIBUTE_OPTION_COMBO = "ATTRIBUTE_OPTION_COMBO",
        PERIOD = "PERIOD",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        CATEGORY_OPTION_GROUP_SET = "CATEGORY_OPTION_GROUP_SET",
        DATA_ELEMENT_GROUP_SET = "DATA_ELEMENT_GROUP_SET",
        ORGANISATION_UNIT_GROUP_SET = "ORGANISATION_UNIT_GROUP_SET",
        ORGANISATION_UNIT_GROUP = "ORGANISATION_UNIT_GROUP",
        CATEGORY = "CATEGORY",
        OPTION_GROUP_SET = "OPTION_GROUP_SET",
        VALIDATION_RULE = "VALIDATION_RULE",
        STATIC = "STATIC",
        ORGANISATION_UNIT_LEVEL = "ORGANISATION_UNIT_LEVEL",
    }

    export enum totalAggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type MetadataProposeParams = {
    change: Record<string, any>
    comment: string
    targetId: string
}

export type MetadataSyncJobParameters = {
    dataValuesPageSize: number
    eventProgramPageSize: number
    trackerProgramPageSize: number
}

export type MetadataVersion = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    hashCode: string
    href: string
    id: string
    importDate: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    type: MetadataVersion.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace MetadataVersion {
    export enum type {
        BEST_EFFORT = "BEST_EFFORT",
        ATOMIC = "ATOMIC",
    }
}

export type MethodAllowedList = {
    allowedMethods: Array<string>
    type: string
}

export type MinMaxValueDto = {
    categoryOptionCombo: UID_CategoryOptionCombo
    dataElement: UID_DataElement
    maxValue: number
    minValue: number
    orgUnit: UID_OrganisationUnit
}

export type MinMaxValueParams = {
    dataSets: Array<string>
    organisationUnit: string
}

export type MonitoringJobParameters = {
    persistResults: boolean
    relativeEnd: number
    relativeStart: number
    sendNotifications: boolean
    validationRuleGroups: Array<string>
}

export type Node = {
    children: Array<Node>
    collection: boolean
    comment: string
    complex: boolean
    metadata: boolean
    name: string
    namespace: string
    order: number
    parent: Node
    property: Property
    simple: boolean
    type: Node.type
    unorderedChildren: Array<Node>
}

export namespace Node {
    export enum type {
        SIMPLE = "SIMPLE",
        COMPLEX = "COMPLEX",
        COLLECTION = "COLLECTION",
    }
}

export type Note = {
    lastUpdated: string
    lastUpdatedBy: UserInfoSnapshot
    note: string
    storedBy: string
    storedDate: string
    value: string
}

export type Notification = {
    category: Notification.category
    completed: boolean
    data: Record<string, any>
    dataType: Notification.dataType
    id: string
    level: Notification.level
    message: string
    time: string
    uid: string
}

export namespace Notification {
    export enum category {
        DATA_STATISTICS = "DATA_STATISTICS",
        DATA_INTEGRITY = "DATA_INTEGRITY",
        RESOURCE_TABLE = "RESOURCE_TABLE",
        ANALYTICS_TABLE = "ANALYTICS_TABLE",
        CONTINUOUS_ANALYTICS_TABLE = "CONTINUOUS_ANALYTICS_TABLE",
        DATA_SYNC = "DATA_SYNC",
        TRACKER_PROGRAMS_DATA_SYNC = "TRACKER_PROGRAMS_DATA_SYNC",
        EVENT_PROGRAMS_DATA_SYNC = "EVENT_PROGRAMS_DATA_SYNC",
        FILE_RESOURCE_CLEANUP = "FILE_RESOURCE_CLEANUP",
        IMAGE_PROCESSING = "IMAGE_PROCESSING",
        META_DATA_SYNC = "META_DATA_SYNC",
        AGGREGATE_DATA_EXCHANGE = "AGGREGATE_DATA_EXCHANGE",
        SMS_SEND = "SMS_SEND",
        SEND_SCHEDULED_MESSAGE = "SEND_SCHEDULED_MESSAGE",
        PROGRAM_NOTIFICATIONS = "PROGRAM_NOTIFICATIONS",
        VALIDATION_RESULTS_NOTIFICATION = "VALIDATION_RESULTS_NOTIFICATION",
        CREDENTIALS_EXPIRY_ALERT = "CREDENTIALS_EXPIRY_ALERT",
        MONITORING = "MONITORING",
        PUSH_ANALYSIS = "PUSH_ANALYSIS",
        TRACKER_SEARCH_OPTIMIZATION = "TRACKER_SEARCH_OPTIMIZATION",
        PREDICTOR = "PREDICTOR",
        DATA_SET_NOTIFICATION = "DATA_SET_NOTIFICATION",
        REMOVE_USED_OR_EXPIRED_RESERVED_VALUES = "REMOVE_USED_OR_EXPIRED_RESERVED_VALUES",
        TRACKER_IMPORT_JOB = "TRACKER_IMPORT_JOB",
        TRACKER_IMPORT_NOTIFICATION_JOB = "TRACKER_IMPORT_NOTIFICATION_JOB",
        TRACKER_IMPORT_RULE_ENGINE_JOB = "TRACKER_IMPORT_RULE_ENGINE_JOB",
        MATERIALIZED_SQL_VIEW_UPDATE = "MATERIALIZED_SQL_VIEW_UPDATE",
        LEADER_ELECTION = "LEADER_ELECTION",
        LEADER_RENEWAL = "LEADER_RENEWAL",
        COMPLETE_DATA_SET_REGISTRATION_IMPORT = "COMPLETE_DATA_SET_REGISTRATION_IMPORT",
        DATAVALUE_IMPORT_INTERNAL = "DATAVALUE_IMPORT_INTERNAL",
        METADATA_IMPORT = "METADATA_IMPORT",
        DATAVALUE_IMPORT = "DATAVALUE_IMPORT",
        GEOJSON_IMPORT = "GEOJSON_IMPORT",
        EVENT_IMPORT = "EVENT_IMPORT",
        ENROLLMENT_IMPORT = "ENROLLMENT_IMPORT",
        TEI_IMPORT = "TEI_IMPORT",
        DISABLE_INACTIVE_USERS = "DISABLE_INACTIVE_USERS",
        ACCOUNT_EXPIRY_ALERT = "ACCOUNT_EXPIRY_ALERT",
        SYSTEM_VERSION_UPDATE_CHECK = "SYSTEM_VERSION_UPDATE_CHECK",
        TEST = "TEST",
        MOCK = "MOCK",
        GML_IMPORT = "GML_IMPORT",
        ANALYTICSTABLE_UPDATE = "ANALYTICSTABLE_UPDATE",
        PROGRAM_DATA_SYNC = "PROGRAM_DATA_SYNC",
    }

    export enum dataType {
        PARAMETERS = "PARAMETERS",
    }

    export enum level {
        OFF = "OFF",
        DEBUG = "DEBUG",
        LOOP = "LOOP",
        INFO = "INFO",
        WARN = "WARN",
        ERROR = "ERROR",
    }
}

export type OAuth2Client = {
    access: Access
    attributeValues: Array<AttributeValue>
    cid: string
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    grantTypes: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    redirectUris: Array<string>
    secret: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ObjectCount = {
    objectCounts: Record<string, number>
}

export type ObjectReport = {
    displayName: string
    errorReports: Array<ErrorReport>
    index: number
    klass: string
    uid: string
}

export type ObjectStyle = {
    color: string
    icon: string
}

export type ObjectValueTypeRenderingOption = {
    clazz: string
    hasOptionSet: boolean
    renderingTypes: Array<
        | "DEFAULT"
        | "DROPDOWN"
        | "VERTICAL_RADIOBUTTONS"
        | "HORIZONTAL_RADIOBUTTONS"
        | "VERTICAL_CHECKBOXES"
        | "HORIZONTAL_CHECKBOXES"
        | "SHARED_HEADER_RADIOBUTTONS"
        | "ICONS_AS_BUTTONS"
        | "SPINNER"
        | "ICON"
        | "TOGGLE"
        | "VALUE"
        | "SLIDER"
        | "LINEAR_SCALE"
        | "AUTOCOMPLETE"
        | "QR_CODE"
        | "BAR_CODE"
        | "GS1_DATAMATRIX"
        | "CANVAS"
    >
    valueType: ObjectValueTypeRenderingOption.valueType
}

export namespace ObjectValueTypeRenderingOption {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type Option = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    optionSet: OptionSet
    publicAccess: string
    sharing: Sharing
    shortName: string
    sortOrder: number
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type OptionGroup = {
    access: Access
    aggregationType: OptionGroup.aggregationType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    optionSet: OptionSet
    options: Array<Option>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace OptionGroup {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }
}

export type OptionGroupSet = {
    access: Access
    aggregationType: OptionGroupSet.aggregationType
    allItems: boolean
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: OptionGroupSet.dataDimensionType
    description: string
    dimension: string
    dimensionItemKeywords: DimensionItemKeywords
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    items: Array<Ref_DimensionalItemObject>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    name: string
    optionGroups: Array<OptionGroup>
    optionSet: OptionSet
    programStage: ProgramStage
    publicAccess: string
    repetition: EventRepetition
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: OptionGroupSet.valueType
}

export namespace OptionGroupSet {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type OptionSet = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    options: Array<Option>
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: OptionSet.valueType
    version: number
}

export namespace OptionSet {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type OrderCriteria = {
    direction: OrderCriteria.direction
    field: string
}

export namespace OrderCriteria {
    export enum direction {
        ASC = "ASC",
        DESC = "DESC",
        IASC = "IASC",
        IDESC = "IDESC",
    }
}

export type OrganisationUnit = {
    access: Access
    address: string
    aggregationType: OrganisationUnit.aggregationType
    ancestors: Array<OrganisationUnit>
    attributeValues: Array<AttributeValue>
    children: Array<OrganisationUnit>
    closedDate: string
    code: string
    comment: string
    contactPerson: string
    created: string
    createdBy: User
    dataSets: Array<DataSet>
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    email: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    geometry: Record<string, any>
    href: string
    id: string
    image: FileResource
    lastUpdated: string
    lastUpdatedBy: User
    leaf: boolean
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    level: number
    memberCount: number
    name: string
    openingDate: string
    organisationUnitGroups: Array<OrganisationUnitGroup>
    parent: OrganisationUnit
    path: string
    phoneNumber: string
    programs: Array<Program>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    type: string
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    users: Array<User>
}

export namespace OrganisationUnit {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }
}

export type OrganisationUnitGroup = {
    access: Access
    aggregationType: OrganisationUnitGroup.aggregationType
    attributeValues: Array<AttributeValue>
    code: string
    color: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    featureType: OrganisationUnitGroup.featureType
    formName: string
    geometry: Record<string, any>
    groupSets: Array<OrganisationUnitGroupSet>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    organisationUnits: Array<OrganisationUnit>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    symbol: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace OrganisationUnitGroup {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }
}

export type OrganisationUnitGroupSet = {
    access: Access
    aggregationType: OrganisationUnitGroupSet.aggregationType
    allItems: boolean
    attributeValues: Array<AttributeValue>
    code: string
    compulsory: boolean
    created: string
    createdBy: User
    dataDimension: boolean
    dataDimensionType: OrganisationUnitGroupSet.dataDimensionType
    description: string
    dimension: string
    dimensionItemKeywords: DimensionItemKeywords
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    includeSubhierarchyInAnalytics: boolean
    items: Array<Ref_DimensionalItemObject>
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    name: string
    optionSet: OptionSet
    organisationUnitGroups: Array<OrganisationUnitGroup>
    programStage: ProgramStage
    publicAccess: string
    repetition: EventRepetition
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: OrganisationUnitGroupSet.valueType
}

export namespace OrganisationUnitGroupSet {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dataDimensionType {
        DISAGGREGATION = "DISAGGREGATION",
        ATTRIBUTE = "ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type OrganisationUnitGroupSetDimension = {
    organisationUnitGroupSet: OrganisationUnitGroupSet
    organisationUnitGroups: Array<OrganisationUnitGroup>
}

export type OrganisationUnitLevel = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    level: number
    name: string
    offlineLevels: number
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type OrgUnitInfo = {
    address: string
    closedDate: string
    code: string
    comment: string
    contactPerson: string
    description: string
    email: string
    featureType: OrgUnitInfo.featureType
    id: string
    imageId: string
    latitude: number
    level: number
    levelName: string
    longitude: number
    name: string
    openingDate: string
    parentName: string
    phoneNumber: string
    shortName: string
    url: string
}

export namespace OrgUnitInfo {
    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }
}

export type OrgUnitMergeQuery = {
    dataApprovalMergeStrategy: OrgUnitMergeQuery.dataApprovalMergeStrategy
    dataValueMergeStrategy: OrgUnitMergeQuery.dataValueMergeStrategy
    deleteSources: boolean
    sources: Array<string>
    target: string
}

export namespace OrgUnitMergeQuery {
    export enum dataApprovalMergeStrategy {
        LAST_UPDATED = "LAST_UPDATED",
        DISCARD = "DISCARD",
    }

    export enum dataValueMergeStrategy {
        LAST_UPDATED = "LAST_UPDATED",
        DISCARD = "DISCARD",
    }
}

export type OrgUnitProfile = {
    attributes: Array<string>
    dataItems: Array<string>
    groupSets: Array<string>
}

export type OrgUnitProfileData = {
    attributes: Array<ProfileItem>
    dataItems: Array<ProfileItem>
    groupSets: Array<ProfileItem>
    info: OrgUnitInfo
}

export type OrgUnitSplitQuery = {
    deleteSource: boolean
    primaryTarget: string
    source: string
    targets: Array<string>
}

export type OutboundMessageResponseSummary = {
    batchType: OutboundMessageResponseSummary.batchType
    errorMessage: string
    failed: number
    pending: number
    responseMessage: string
    sent: number
    status: OutboundMessageResponseSummary.status
    total: number
}

export namespace OutboundMessageResponseSummary {
    export enum batchType {
        SMS = "SMS",
        EMAIL = "EMAIL",
        HTTP = "HTTP",
    }

    export enum status {
        COMPLETED = "COMPLETED",
        FAILED = "FAILED",
        PENDING = "PENDING",
        ABORTED = "ABORTED",
    }
}

export type OutboundSms = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    date: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    message: string
    name: string
    publicAccess: string
    recipients: Array<string>
    sender: string
    sharing: Sharing
    status: OutboundSms.status
    subject: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace OutboundSms {
    export enum status {
        OUTBOUND = "OUTBOUND",
        SENT = "SENT",
        ERROR = "ERROR",
        PENDING = "PENDING",
        SCHEDULED = "SCHEDULED",
        DELIVERED = "DELIVERED",
        FAILED = "FAILED",
    }
}

export type OutlierAnalysis = {
    enabled: boolean
    extremeLines: OutlierLine
    normalizationMethod: OutlierAnalysis.normalizationMethod
    outlierMethod: OutlierAnalysis.outlierMethod
    thresholdFactor: number
}

export namespace OutlierAnalysis {
    export enum normalizationMethod {
        Y_RESIDUALS_LINEAR = "Y_RESIDUALS_LINEAR",
    }

    export enum outlierMethod {
        IQR = "IQR",
        STANDARD_Z_SCORE = "STANDARD_Z_SCORE",
        MODIFIED_Z_SCORE = "MODIFIED_Z_SCORE",
    }
}

export type OutlierDetectionMetadata = {
    algorithm: OutlierDetectionMetadata.algorithm
    count: number
    dataEndDate: string
    dataStartDate: string
    maxResults: number
    orderBy: OutlierDetectionMetadata.orderBy
    threshold: number
}

export namespace OutlierDetectionMetadata {
    export enum algorithm {
        Z_SCORE = "Z_SCORE",
        MIN_MAX = "MIN_MAX",
        MOD_Z_SCORE = "MOD_Z_SCORE",
    }

    export enum orderBy {
        MEAN_ABS_DEV = "MEAN_ABS_DEV",
        Z_SCORE = "Z_SCORE",
    }
}

export type OutlierDetectionResponse = {
    metadata: OutlierDetectionMetadata
    outlierValues: Array<OutlierValue>
}

export type OutlierLine = {
    enabled: boolean
    value: number
}

export type OutlierValue = {
    absDev: number
    aoc: string
    aocName: string
    coc: string
    cocName: string
    de: string
    deName: string
    followup: boolean
    lastUpdated: string
    lowerBound: number
    mean: number
    median: number
    ou: string
    ouName: string
    pe: string
    stdDev: number
    upperBound: number
    value: number
    zScore: number
}

export type Pager = {
    nextPage?: string
    page: number
    pageCount: number
    pageSize: number
    prevPage?: string
    total: number
}

export type PerformanceMetrics = {
    executionPlans: Array<ExecutionPlan>
    totalTimeInMillis: number
}

export type Period = string

export type PersistenceReport = {
    /**
     * keys are class org.hisp.dhis.tracker.TrackerType
     */
    typeReportMap: Record<string, TrackerTypeReport>
}

export type PotentialDuplicate = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    createdByUserName: string
    displayName: string
    duplicate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    lastUpdatedByUserName: string
    name: string
    original: string
    publicAccess: string
    sharing: Sharing
    status: PotentialDuplicate.status
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace PotentialDuplicate {
    export enum status {
        ALL = "ALL",
        OPEN = "OPEN",
        INVALID = "INVALID",
        MERGED = "MERGED",
    }
}

export type Predictor = {
    access: Access
    annualSampleCount: number
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    generator: Expression
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    organisationUnitDescendants: Predictor.organisationUnitDescendants
    organisationUnitLevels: Array<OrganisationUnitLevel>
    output: DataElement
    outputCombo: CategoryOptionCombo
    periodType: Predictor.periodType
    predictorGroups: Array<PredictorGroup>
    publicAccess: string
    sampleSkipTest: Expression
    sequentialSampleCount: number
    sequentialSkipCount: number
    sharing: Sharing
    shortName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace Predictor {
    export enum organisationUnitDescendants {
        SELECTED = "SELECTED",
        DESCENDANTS = "DESCENDANTS",
    }

    export enum periodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }
}

export type PredictorGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    predictors: Array<Predictor>
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type PredictorJobParameters = {
    predictorGroups: Array<string>
    predictors: Array<string>
    relativeEnd: number
    relativeStart: number
}

export type Process = {
    cancelledTime: string
    complete: boolean
    completedTime: string
    description: string
    duration: number
    error: string
    jobId: string
    stages: Array<Stage>
    status: Process.status
    summary: string
}

export namespace Process {
    export enum status {
        RUNNING = "RUNNING",
        SUCCESS = "SUCCESS",
        ERROR = "ERROR",
        CANCELLED = "CANCELLED",
    }
}

export type ProcessInfo = {
    cancelledTime: string
    completedTime: string
    description: string
    error: string
    jobId: string
    stages: Array<string>
    startedTime: string
    status: ProcessInfo.status
    summary: string
}

export namespace ProcessInfo {
    export enum status {
        RUNNING = "RUNNING",
        SUCCESS = "SUCCESS",
        ERROR = "ERROR",
        CANCELLED = "CANCELLED",
    }
}

export type ProfileItem = {
    id: string
    label: string
    /**
     * The actual type is unknown.
     * (Java type was: `class java.lang.Object`)
     */
    value: Record<string, any>
}

export type Program = {
    access: Access
    accessLevel: Program.accessLevel
    attributeValues: Array<AttributeValue>
    categoryCombo: CategoryCombo
    code: string
    completeEventsExpiryDays: number
    created: string
    createdBy: User
    dataEntryForm: DataEntryForm
    description: string
    displayDescription: string
    displayEnrollmentDateLabel: string
    displayFormName: string
    displayFrontPageList: boolean
    displayIncidentDate: boolean
    displayIncidentDateLabel: string
    displayName: string
    displayShortName: string
    enrollmentDateLabel: string
    expiryDays: number
    expiryPeriodType: Program.expiryPeriodType
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    featureType: Program.featureType
    formName: string
    href: string
    id: string
    ignoreOverdueEvents: boolean
    incidentDateLabel: string
    lastUpdated: string
    lastUpdatedBy: User
    maxTeiCountToReturn: number
    minAttributesRequiredToSearch: number
    name: string
    notificationTemplates: Array<ProgramNotificationTemplate>
    onlyEnrollOnce: boolean
    openDaysAfterCoEndDate: number
    organisationUnits: Array<OrganisationUnit>
    programIndicators: Array<ProgramIndicator>
    programRuleVariables: Array<ProgramRuleVariable>
    programSections: Array<ProgramSection>
    programStages: Array<ProgramStage>
    programTrackedEntityAttributes: Array<Ref_ProgramTrackedEntityAttribute>
    programType: Program.programType
    publicAccess: string
    registration: boolean
    relatedProgram: Program
    selectEnrollmentDatesInFuture: boolean
    selectIncidentDatesInFuture: boolean
    sharing: Sharing
    shortName: string
    skipOffline: boolean
    style: ObjectStyle
    trackedEntityType: TrackedEntityType
    translations: Array<Translation>
    useFirstStageDuringRegistration: boolean
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    userRoles: Array<UserRole>
    version: number
    withoutRegistration: boolean
}

export namespace Program {
    export enum accessLevel {
        OPEN = "OPEN",
        AUDITED = "AUDITED",
        PROTECTED = "PROTECTED",
        CLOSED = "CLOSED",
    }

    export enum expiryPeriodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }

    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }

    export enum programType {
        WITH_REGISTRATION = "WITH_REGISTRATION",
        WITHOUT_REGISTRATION = "WITHOUT_REGISTRATION",
    }
}

export type ProgramIndicator = {
    access: Access
    aggregateExportAttributeOptionCombo: string
    aggregateExportCategoryOptionCombo: string
    aggregationType: ProgramIndicator.aggregationType
    analyticsPeriodBoundaries: Array<Ref_AnalyticsPeriodBoundary>
    analyticsType: ProgramIndicator.analyticsType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    decimals: number
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayInForm: boolean
    displayName: string
    displayShortName: string
    expression: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filter: string
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    orgUnitField: string
    program: Program
    programIndicatorGroups: Array<ProgramIndicatorGroup>
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ProgramIndicator {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum analyticsType {
        EVENT = "EVENT",
        ENROLLMENT = "ENROLLMENT",
    }
}

export type ProgramIndicatorGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    programIndicators: Array<ProgramIndicator>
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ProgramMessage = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    deliveryChannels: Array<"SMS" | "EMAIL" | "HTTP">
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    messageStatus: ProgramMessage.messageStatus
    name: string
    notificationTemplate: string
    processedDate: string
    programInstance: Ref_ProgramInstance
    programStageInstance: Ref_ProgramStageInstance
    publicAccess: string
    recipients: ProgramMessageRecipients
    sharing: Sharing
    storeCopy: boolean
    subject: string
    text: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ProgramMessage {
    export enum messageStatus {
        SENT = "SENT",
        FAILED = "FAILED",
        SCHEDULED = "SCHEDULED",
        OUTBOUND = "OUTBOUND",
    }
}

export type ProgramMessageRecipients = {
    emailAddresses: Array<string>
    organisationUnit: OrganisationUnit
    phoneNumbers: Array<string>
    trackedEntityInstance: Ref_TrackedEntityInstance
}

export type ProgramNotificationTemplate = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    deliveryChannels: Array<"SMS" | "EMAIL" | "HTTP">
    displayMessageTemplate: string
    displayName: string
    displaySubjectTemplate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    messageTemplate: string
    name: string
    notificationRecipient: ProgramNotificationTemplate.notificationRecipient
    notificationTrigger: ProgramNotificationTemplate.notificationTrigger
    notifyParentOrganisationUnitOnly: boolean
    notifyUsersInHierarchyOnly: boolean
    publicAccess: string
    recipientDataElement: DataElement
    recipientProgramAttribute: TrackedEntityAttribute
    recipientUserGroup: UserGroup
    relativeScheduledDays: number
    sendRepeatable: boolean
    sharing: Sharing
    subjectTemplate: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ProgramNotificationTemplate {
    export enum notificationRecipient {
        TRACKED_ENTITY_INSTANCE = "TRACKED_ENTITY_INSTANCE",
        ORGANISATION_UNIT_CONTACT = "ORGANISATION_UNIT_CONTACT",
        USERS_AT_ORGANISATION_UNIT = "USERS_AT_ORGANISATION_UNIT",
        USER_GROUP = "USER_GROUP",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        DATA_ELEMENT = "DATA_ELEMENT",
        WEB_HOOK = "WEB_HOOK",
    }

    export enum notificationTrigger {
        ENROLLMENT = "ENROLLMENT",
        COMPLETION = "COMPLETION",
        PROGRAM_RULE = "PROGRAM_RULE",
        SCHEDULED_DAYS_DUE_DATE = "SCHEDULED_DAYS_DUE_DATE",
        SCHEDULED_DAYS_INCIDENT_DATE = "SCHEDULED_DAYS_INCIDENT_DATE",
        SCHEDULED_DAYS_ENROLLMENT_DATE = "SCHEDULED_DAYS_ENROLLMENT_DATE",
    }
}

export type ProgramOwner = {
    ownerOrgUnit: string
    program: string
    trackedEntityInstance: string
}

export type ProgramRule = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    condition: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    priority: number
    program: Program
    programRuleActions: Array<ProgramRuleAction>
    programStage: ProgramStage
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ProgramRuleAction = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    content: string
    created: string
    createdBy: User
    data: string
    dataElement: DataElement
    displayContent: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    location: string
    name: string
    option: Option
    optionGroup: OptionGroup
    programIndicator: ProgramIndicator
    programRule: ProgramRule
    programRuleActionEvaluationEnvironments: Array<"WEB" | "ANDROID">
    programRuleActionEvaluationTime: ProgramRuleAction.programRuleActionEvaluationTime
    programRuleActionType: ProgramRuleAction.programRuleActionType
    programStage: ProgramStage
    programStageSection: ProgramStageSection
    publicAccess: string
    sharing: Sharing
    templateUid: string
    trackedEntityAttribute: TrackedEntityAttribute
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace ProgramRuleAction {
    export enum programRuleActionEvaluationTime {
        ON_DATA_ENTRY = "ON_DATA_ENTRY",
        ON_COMPLETE = "ON_COMPLETE",
        ALWAYS = "ALWAYS",
    }

    export enum programRuleActionType {
        DISPLAYTEXT = "DISPLAYTEXT",
        DISPLAYKEYVALUEPAIR = "DISPLAYKEYVALUEPAIR",
        HIDEFIELD = "HIDEFIELD",
        HIDESECTION = "HIDESECTION",
        HIDEPROGRAMSTAGE = "HIDEPROGRAMSTAGE",
        ASSIGN = "ASSIGN",
        SHOWWARNING = "SHOWWARNING",
        WARNINGONCOMPLETE = "WARNINGONCOMPLETE",
        SHOWERROR = "SHOWERROR",
        ERRORONCOMPLETE = "ERRORONCOMPLETE",
        CREATEEVENT = "CREATEEVENT",
        SETMANDATORYFIELD = "SETMANDATORYFIELD",
        SENDMESSAGE = "SENDMESSAGE",
        SCHEDULEMESSAGE = "SCHEDULEMESSAGE",
        HIDEOPTION = "HIDEOPTION",
        SHOWOPTIONGROUP = "SHOWOPTIONGROUP",
        HIDEOPTIONGROUP = "HIDEOPTIONGROUP",
    }
}

export type ProgramRuleVariable = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataElement: DataElement
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    program: Program
    programRuleVariableSourceType: ProgramRuleVariable.programRuleVariableSourceType
    programStage: ProgramStage
    publicAccess: string
    sharing: Sharing
    trackedEntityAttribute: TrackedEntityAttribute
    translations: Array<Translation>
    useCodeForOptionSet: boolean
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: ProgramRuleVariable.valueType
}

export namespace ProgramRuleVariable {
    export enum programRuleVariableSourceType {
        DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE = "DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE",
        DATAELEMENT_NEWEST_EVENT_PROGRAM = "DATAELEMENT_NEWEST_EVENT_PROGRAM",
        DATAELEMENT_CURRENT_EVENT = "DATAELEMENT_CURRENT_EVENT",
        DATAELEMENT_PREVIOUS_EVENT = "DATAELEMENT_PREVIOUS_EVENT",
        CALCULATED_VALUE = "CALCULATED_VALUE",
        TEI_ATTRIBUTE = "TEI_ATTRIBUTE",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type ProgramSection = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    program: Program
    publicAccess: string
    /**
     * The exact type is unknown.
     * (Java type was: `org.hisp.dhis.render.DeviceRenderTypeMap<org.hisp.dhis.render.type.SectionRenderingObject>`)
     */
    renderType: any
    sharing: Sharing
    shortName: string
    sortOrder: number
    style: ObjectStyle
    trackedEntityAttributes: Array<TrackedEntityAttribute>
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ProgramStage = {
    access: Access
    allowGenerateNextVisit: boolean
    attributeValues: Array<AttributeValue>
    autoGenerateEvent: boolean
    blockEntryForm: boolean
    code: string
    created: string
    createdBy: User
    dataEntryForm: DataEntryForm
    description: string
    displayDescription: string
    displayDueDateLabel: string
    displayExecutionDateLabel: string
    displayFormName: string
    displayGenerateEventBox: boolean
    displayName: string
    displayShortName: string
    dueDateLabel: string
    enableUserAssignment: boolean
    executionDateLabel: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    featureType: ProgramStage.featureType
    formName: string
    formType: ProgramStage.formType
    generatedByEnrollmentDate: boolean
    hideDueDate: boolean
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    minDaysFromStart: number
    name: string
    nextScheduleDate: DataElement
    notificationTemplates: Array<ProgramNotificationTemplate>
    openAfterEnrollment: boolean
    periodType: ProgramStage.periodType
    preGenerateUID: boolean
    program: Program
    programStageDataElements: Array<Ref_ProgramStageDataElement>
    programStageSections: Array<ProgramStageSection>
    publicAccess: string
    referral: boolean
    remindCompleted: boolean
    repeatable: boolean
    reportDateToUse: string
    sharing: Sharing
    shortName: string
    sortOrder: number
    standardInterval: number
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    validationStrategy: ProgramStage.validationStrategy
}

export namespace ProgramStage {
    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }

    export enum formType {
        DEFAULT = "DEFAULT",
        CUSTOM = "CUSTOM",
        SECTION = "SECTION",
        SECTION_MULTIORG = "SECTION_MULTIORG",
    }

    export enum periodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }

    export enum validationStrategy {
        ON_COMPLETE = "ON_COMPLETE",
        ON_UPDATE_AND_INSERT = "ON_UPDATE_AND_INSERT",
    }
}

export type ProgramStageInstanceFilter = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayName: string
    eventQueryCriteria: EventQueryCriteria
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    program: string
    programStage: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ProgramStageQueryCriteria = {
    assignedUserMode: ProgramStageQueryCriteria.assignedUserMode
    assignedUsers: Array<string>
    attributeValueFilters: Array<AttributeValueFilter>
    dataFilters: Array<EventDataFilter>
    displayColumnOrder: Array<string>
    enrolledAt: DateFilterPeriod
    enrollmentOccurredAt: DateFilterPeriod
    enrollmentStatus: ProgramStageQueryCriteria.enrollmentStatus
    eventCreatedAt: DateFilterPeriod
    eventOccurredAt: DateFilterPeriod
    eventScheduledAt: DateFilterPeriod
    eventStatus: ProgramStageQueryCriteria.eventStatus
    order: string
    orgUnit: string
    ouMode: ProgramStageQueryCriteria.ouMode
}

export namespace ProgramStageQueryCriteria {
    export enum assignedUserMode {
        CURRENT = "CURRENT",
        PROVIDED = "PROVIDED",
        NONE = "NONE",
        ANY = "ANY",
        ALL = "ALL",
    }

    export enum enrollmentStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }

    export enum eventStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }

    export enum ouMode {
        SELECTED = "SELECTED",
        CHILDREN = "CHILDREN",
        DESCENDANTS = "DESCENDANTS",
        ACCESSIBLE = "ACCESSIBLE",
        CAPTURE = "CAPTURE",
        ALL = "ALL",
    }
}

export type ProgramStageSection = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dataElements: Array<DataElement>
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    programIndicators: Array<ProgramIndicator>
    programStage: ProgramStage
    publicAccess: string
    /**
     * The exact type is unknown.
     * (Java type was: `org.hisp.dhis.render.DeviceRenderTypeMap<org.hisp.dhis.render.type.SectionRenderingObject>`)
     */
    renderType: any
    sharing: Sharing
    shortName: string
    sortOrder: number
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type ProgramStageWorkingList = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    program: Program
    programStage: ProgramStage
    programStageQueryCriteria: ProgramStageQueryCriteria
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type Property = {
    analyticalObject: boolean
    apiEndpoint: string
    attribute: boolean
    cascade: string
    collection: boolean
    collectionName: string
    collectionWrapping: boolean
    constants: Array<string>
    /**
     * The actual type is unknown.
     * (Java type was: `class java.lang.Object`)
     */
    defaultValue: Record<string, any>
    description: string
    embeddedObject: boolean
    fieldName: string
    gistPreferences: GistPreferences
    href: string
    i18nTranslationKey: string
    identifiableObject: boolean
    inverseRole: string
    itemKlass: string
    itemPropertyType: Property.itemPropertyType
    klass: string
    length: number
    manyToMany: boolean
    manyToOne: boolean
    max: number
    min: number
    name: string
    nameableObject: boolean
    namespace: string
    oneToMany: boolean
    oneToOne: boolean
    ordered: boolean
    owner: boolean
    owningRole: string
    persisted: boolean
    propertyTransformer: boolean
    propertyType: Property.propertyType
    readable: boolean
    relativeApiEndpoint: string
    required: boolean
    simple: boolean
    translatable: boolean
    translationKey: string
    unique: boolean
    writable: boolean
}

export namespace Property {
    export enum itemPropertyType {
        IDENTIFIER = "IDENTIFIER",
        TEXT = "TEXT",
        NUMBER = "NUMBER",
        INTEGER = "INTEGER",
        BOOLEAN = "BOOLEAN",
        USERNAME = "USERNAME",
        EMAIL = "EMAIL",
        PASSWORD = "PASSWORD",
        URL = "URL",
        DATE = "DATE",
        PHONENUMBER = "PHONENUMBER",
        GEOLOCATION = "GEOLOCATION",
        COLOR = "COLOR",
        CONSTANT = "CONSTANT",
        COMPLEX = "COMPLEX",
        COLLECTION = "COLLECTION",
        REFERENCE = "REFERENCE",
    }

    export enum propertyType {
        IDENTIFIER = "IDENTIFIER",
        TEXT = "TEXT",
        NUMBER = "NUMBER",
        INTEGER = "INTEGER",
        BOOLEAN = "BOOLEAN",
        USERNAME = "USERNAME",
        EMAIL = "EMAIL",
        PASSWORD = "PASSWORD",
        URL = "URL",
        DATE = "DATE",
        PHONENUMBER = "PHONENUMBER",
        GEOLOCATION = "GEOLOCATION",
        COLOR = "COLOR",
        CONSTANT = "CONSTANT",
        COMPLEX = "COMPLEX",
        COLLECTION = "COLLECTION",
        REFERENCE = "REFERENCE",
    }
}

export type PushAnalysis = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    dashboard: Dashboard
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    message: string
    name: string
    publicAccess: string
    recipientUserGroups: Array<UserGroup>
    sharing: Sharing
    title: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type PushAnalysisJobParameters = {
    pushAnalysis: Array<string>
}

export type QueryModifiers = {
    aggregationType: QueryModifiers.aggregationType
    maxDate: string
    minDate: string
    periodOffset: number
    subExpression: string
    valueType: QueryModifiers.valueType
    yearToDate: boolean
}

export namespace QueryModifiers {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type Rectangle = {
    count: number
    extent: string
}

export type Ref_AnalyticsPeriodBoundary = {
    id: string
}

export type Ref_DataElementOperand = {
    id: string
}

export type Ref_DimensionalItemObject = {
    id: string
}

export type Ref_EventChart = {
    id: string
}

export type Ref_EventReport = {
    id: string
}

export type Ref_InterpretationComment = {
    id: string
}

export type Ref_Legend = {
    id: string
}

export type Ref_Message = {
    id: string
}

export type Ref_ProgramDataElementDimensionItem = {
    id: string
}

export type Ref_ProgramInstance = {
    id: string
}

export type Ref_ProgramStageDataElement = {
    id: string
}

export type Ref_ProgramStageInstance = {
    id: string
}

export type Ref_ProgramTrackedEntityAttribute = {
    id: string
}

export type Ref_ProgramTrackedEntityAttributeDimensionItem = {
    id: string
}

export type Ref_ReportingRate = {
    id: string
}

export type Ref_SimpleEventVisualizationView = {
    id: string
}

export type Ref_SimpleVisualizationView = {
    id: string
}

export type Ref_TrackedEntityInstance = {
    id: string
}

export type Ref_TrackedEntityTypeAttribute = {
    id: string
}

export type Reference = {
    node: Record<string, any>
    uuid: string
}

export type RefererAllowedList = {
    allowedReferrers: Array<string>
    type: string
}

export type Relationship = {
    bidirectional: boolean
    created: string
    from: RelationshipItem
    lastUpdated: string
    relationship: string
    relationshipName: string
    relationshipType: string
    to: RelationshipItem
}

export type RelationshipConstraint = {
    program: Program
    programStage: ProgramStage
    relationshipEntity: RelationshipConstraint.relationshipEntity
    trackedEntityType: TrackedEntityType
    trackerDataView: TrackerDataView
}

export namespace RelationshipConstraint {
    export enum relationshipEntity {
        TRACKED_ENTITY_INSTANCE = "TRACKED_ENTITY_INSTANCE",
        PROGRAM_INSTANCE = "PROGRAM_INSTANCE",
        PROGRAM_STAGE_INSTANCE = "PROGRAM_STAGE_INSTANCE",
    }
}

export type RelationshipItem = {
    enrollment: Enrollment
    event: Event
    trackedEntityInstance: Dxf2EventsTrackedentity_TrackedEntityInstance
}

export type RelationshipType = {
    access: Access
    attributeValues: Array<AttributeValue>
    bidirectional: boolean
    code: string
    created: string
    createdBy: User
    description: string
    displayFromToName: string
    displayName: string
    displayToFromName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    fromConstraint: RelationshipConstraint
    fromToName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    referral: boolean
    sharing: Sharing
    toConstraint: RelationshipConstraint
    toFromName: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type RelativePeriods = {
    biMonthsThisYear: boolean
    last10FinancialYears: boolean
    last10Years: boolean
    last12Months: boolean
    last12Weeks: boolean
    last14Days: boolean
    last180Days: boolean
    last2SixMonths: boolean
    last30Days: boolean
    last3Days: boolean
    last3Months: boolean
    last4BiWeeks: boolean
    last4Quarters: boolean
    last4Weeks: boolean
    last52Weeks: boolean
    last5FinancialYears: boolean
    last5Years: boolean
    last60Days: boolean
    last6BiMonths: boolean
    last6Months: boolean
    last7Days: boolean
    last90Days: boolean
    lastBiWeek: boolean
    lastBimonth: boolean
    lastFinancialYear: boolean
    lastMonth: boolean
    lastQuarter: boolean
    lastSixMonth: boolean
    lastWeek: boolean
    lastYear: boolean
    monthsLastYear: boolean
    monthsThisYear: boolean
    quartersLastYear: boolean
    quartersThisYear: boolean
    thisBiWeek: boolean
    thisBimonth: boolean
    thisDay: boolean
    thisFinancialYear: boolean
    thisMonth: boolean
    thisQuarter: boolean
    thisSixMonth: boolean
    thisWeek: boolean
    thisYear: boolean
    weeksThisYear: boolean
    yesterday: boolean
}

export type RemoveByIdOperation = {
    op: string
    path: string
}

export type RemoveOperation = {
    op: string
    path: string
}

export type ReplaceOperation = {
    op: string
    path: string
    value: Record<string, any>
}

export type Report = {
    access: Access
    attributeValues: Array<AttributeValue>
    cacheStrategy: Report.cacheStrategy
    code: string
    created: string
    createdBy: User
    designContent: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    relativePeriods: RelativePeriods
    reportParams: ReportingParams
    sharing: Sharing
    translations: Array<Translation>
    type: Report.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    visualization: Visualization
}

export namespace Report {
    export enum cacheStrategy {
        NO_CACHE = "NO_CACHE",
        CACHE_1_MINUTE = "CACHE_1_MINUTE",
        CACHE_5_MINUTES = "CACHE_5_MINUTES",
        CACHE_10_MINUTES = "CACHE_10_MINUTES",
        CACHE_15_MINUTES = "CACHE_15_MINUTES",
        CACHE_30_MINUTES = "CACHE_30_MINUTES",
        CACHE_1_HOUR = "CACHE_1_HOUR",
        CACHE_6AM_TOMORROW = "CACHE_6AM_TOMORROW",
        CACHE_TWO_WEEKS = "CACHE_TWO_WEEKS",
        RESPECT_SYSTEM_SETTING = "RESPECT_SYSTEM_SETTING",
    }

    export enum type {
        JASPER_REPORT_TABLE = "JASPER_REPORT_TABLE",
        JASPER_JDBC = "JASPER_JDBC",
        HTML = "HTML",
    }
}

export type ReportingParams = {
    grandParentOrganisationUnit: boolean
    organisationUnit: boolean
    parentOrganisationUnit: boolean
    reportingPeriod: boolean
}

export type RequestInfo = {
    headerXRequestID: string
}

export type ReservedValue = {
    created: string
    expiryDate: string
    key: string
    ownerObject: string
    ownerUid: string
    value: string
}

export type Review = {
    created: string
    id: string
    lastUpdated: string
    rate: number
    reviewText: string
    userId: string
}

export type Route = {
    access: Access
    attributeValues: Array<AttributeValue>
    auth: HttpBasicAuth | ApiTokenAuth
    authorities: Array<string>
    code: string
    created: string
    createdBy: User
    description: string
    disabled: boolean
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    headers: Record<string, string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    url: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type SchedulerEntry = {
    configurable: boolean
    cronExpression: string
    delay: number
    enabled: boolean
    name: string
    nextExecutionTime: string
    sequence: Array<SchedulerEntryJob>
    status: SchedulerEntry.status
    type: string
}

export namespace SchedulerEntry {
    export enum status {
        RUNNING = "RUNNING",
        COMPLETED = "COMPLETED",
        STOPPED = "STOPPED",
        SCHEDULED = "SCHEDULED",
        DISABLED = "DISABLED",
        FAILED = "FAILED",
        NOT_STARTED = "NOT_STARTED",
    }
}

export type SchedulerEntryJob = {
    cronExpression: string
    delay: number
    id: UID_JobConfiguration
    name: string
    nextExecutionTime: string
    status: SchedulerEntryJob.status
    type: SchedulerEntryJob.type
}

export namespace SchedulerEntryJob {
    export enum status {
        RUNNING = "RUNNING",
        COMPLETED = "COMPLETED",
        STOPPED = "STOPPED",
        SCHEDULED = "SCHEDULED",
        DISABLED = "DISABLED",
        FAILED = "FAILED",
        NOT_STARTED = "NOT_STARTED",
    }

    export enum type {
        DATA_STATISTICS = "DATA_STATISTICS",
        DATA_INTEGRITY = "DATA_INTEGRITY",
        RESOURCE_TABLE = "RESOURCE_TABLE",
        ANALYTICS_TABLE = "ANALYTICS_TABLE",
        CONTINUOUS_ANALYTICS_TABLE = "CONTINUOUS_ANALYTICS_TABLE",
        DATA_SYNC = "DATA_SYNC",
        TRACKER_PROGRAMS_DATA_SYNC = "TRACKER_PROGRAMS_DATA_SYNC",
        EVENT_PROGRAMS_DATA_SYNC = "EVENT_PROGRAMS_DATA_SYNC",
        FILE_RESOURCE_CLEANUP = "FILE_RESOURCE_CLEANUP",
        IMAGE_PROCESSING = "IMAGE_PROCESSING",
        META_DATA_SYNC = "META_DATA_SYNC",
        AGGREGATE_DATA_EXCHANGE = "AGGREGATE_DATA_EXCHANGE",
        SMS_SEND = "SMS_SEND",
        SEND_SCHEDULED_MESSAGE = "SEND_SCHEDULED_MESSAGE",
        PROGRAM_NOTIFICATIONS = "PROGRAM_NOTIFICATIONS",
        VALIDATION_RESULTS_NOTIFICATION = "VALIDATION_RESULTS_NOTIFICATION",
        CREDENTIALS_EXPIRY_ALERT = "CREDENTIALS_EXPIRY_ALERT",
        MONITORING = "MONITORING",
        PUSH_ANALYSIS = "PUSH_ANALYSIS",
        TRACKER_SEARCH_OPTIMIZATION = "TRACKER_SEARCH_OPTIMIZATION",
        PREDICTOR = "PREDICTOR",
        DATA_SET_NOTIFICATION = "DATA_SET_NOTIFICATION",
        REMOVE_USED_OR_EXPIRED_RESERVED_VALUES = "REMOVE_USED_OR_EXPIRED_RESERVED_VALUES",
        TRACKER_IMPORT_JOB = "TRACKER_IMPORT_JOB",
        TRACKER_IMPORT_NOTIFICATION_JOB = "TRACKER_IMPORT_NOTIFICATION_JOB",
        TRACKER_IMPORT_RULE_ENGINE_JOB = "TRACKER_IMPORT_RULE_ENGINE_JOB",
        MATERIALIZED_SQL_VIEW_UPDATE = "MATERIALIZED_SQL_VIEW_UPDATE",
        LEADER_ELECTION = "LEADER_ELECTION",
        LEADER_RENEWAL = "LEADER_RENEWAL",
        COMPLETE_DATA_SET_REGISTRATION_IMPORT = "COMPLETE_DATA_SET_REGISTRATION_IMPORT",
        DATAVALUE_IMPORT_INTERNAL = "DATAVALUE_IMPORT_INTERNAL",
        METADATA_IMPORT = "METADATA_IMPORT",
        DATAVALUE_IMPORT = "DATAVALUE_IMPORT",
        GEOJSON_IMPORT = "GEOJSON_IMPORT",
        EVENT_IMPORT = "EVENT_IMPORT",
        ENROLLMENT_IMPORT = "ENROLLMENT_IMPORT",
        TEI_IMPORT = "TEI_IMPORT",
        DISABLE_INACTIVE_USERS = "DISABLE_INACTIVE_USERS",
        ACCOUNT_EXPIRY_ALERT = "ACCOUNT_EXPIRY_ALERT",
        SYSTEM_VERSION_UPDATE_CHECK = "SYSTEM_VERSION_UPDATE_CHECK",
        TEST = "TEST",
        MOCK = "MOCK",
        GML_IMPORT = "GML_IMPORT",
        ANALYTICSTABLE_UPDATE = "ANALYTICSTABLE_UPDATE",
        PROGRAM_DATA_SYNC = "PROGRAM_DATA_SYNC",
    }
}

export type SchedulerQueue = {
    cronExpression: string
    name: string
    sequence: Array<UID_JobConfiguration>
}

export type Section = {
    access: Access
    attributeValues: Array<AttributeValue>
    categoryCombos: Array<CategoryCombo>
    code: string
    created: string
    createdBy: User
    dataElements: Array<DataElement>
    dataSet: DataSet
    description: string
    disableDataElementAutoGroup: boolean
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    greyedFields: Array<Ref_DataElementOperand>
    href: string
    id: string
    indicators: Array<Indicator>
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    showColumnTotals: boolean
    showRowTotals: boolean
    sortOrder: number
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export type Series = {
    axis: number
    dimensionItem: string
    type: Series.type
}

export namespace Series {
    export enum type {
        COLUMN = "COLUMN",
        STACKED_COLUMN = "STACKED_COLUMN",
        BAR = "BAR",
        STACKED_BAR = "STACKED_BAR",
        LINE = "LINE",
        AREA = "AREA",
        STACKED_AREA = "STACKED_AREA",
        PIE = "PIE",
        RADAR = "RADAR",
        GAUGE = "GAUGE",
        YEAR_OVER_YEAR_LINE = "YEAR_OVER_YEAR_LINE",
        YEAR_OVER_YEAR_COLUMN = "YEAR_OVER_YEAR_COLUMN",
        SCATTER = "SCATTER",
        BUBBLE = "BUBBLE",
        SINGLE_VALUE = "SINGLE_VALUE",
        PIVOT_TABLE = "PIVOT_TABLE",
    }
}

export type SeriesKey = {
    hidden: boolean
    label: StyledObject
}

export type Sharing = {
    external: boolean
    owner: string
    public: string
    userGroups: Record<string, UserSharing_UserGroupAccess>
    users: Record<string, UserSharing_UserAccess>
}

export type SharingObject = {
    displayName: string
    externalAccess: boolean
    id: string
    name: string
    publicAccess: string
    user: SharingUser
    userAccesses: Array<SharingUserAccess>
    userGroupAccesses: Array<SharingUserGroupAccess>
}

export type SharingUser = {
    id: string
    name: string
}

export type SharingUserAccess = {
    access: string
    displayName: string
    id: string
    name: string
    username: string
}

export type SharingUserGroupAccess = {
    access: string
    displayName: string
    id: string
    name: string
}

export type SimpleDimension = {
    dimension: string
    parent: SimpleDimension.parent
    values: Array<string>
}

export namespace SimpleDimension {
    export enum parent {
        COLUMN = "COLUMN",
        ROW = "ROW",
        FILTER = "FILTER",
    }
}

export type SimpleImageResource = {
    images: Record<string, string>
}

export type SMPPGatewayConfig = {
    bindType: SMPPGatewayConfig.bindType
    compressed: boolean
    host: string
    id: string
    isDefault: boolean
    maxSmsLength: string
    name: string
    numberPlanIndicator: SMPPGatewayConfig.numberPlanIndicator
    password: string
    port: number
    sendUrlParameters: boolean
    systemId: string
    systemType: string
    typeOfNumber: SMPPGatewayConfig.typeOfNumber
    uid: string
    urlTemplate: string
    username: string
}

export namespace SMPPGatewayConfig {
    export enum bindType {
        BIND_TX = "BIND_TX",
        BIND_RX = "BIND_RX",
        BIND_TRX = "BIND_TRX",
    }

    export enum numberPlanIndicator {
        UNKNOWN = "UNKNOWN",
        ISDN = "ISDN",
        DATA = "DATA",
        TELEX = "TELEX",
        LAND_MOBILE = "LAND_MOBILE",
        NATIONAL = "NATIONAL",
        PRIVATE = "PRIVATE",
        ERMES = "ERMES",
        INTERNET = "INTERNET",
        WAP = "WAP",
    }

    export enum typeOfNumber {
        UNKNOWN = "UNKNOWN",
        INTERNATIONAL = "INTERNATIONAL",
        NATIONAL = "NATIONAL",
        NETWORK_SPECIFIC = "NETWORK_SPECIFIC",
        SUBSCRIBER_NUMBER = "SUBSCRIBER_NUMBER",
        ALPHANUMERIC = "ALPHANUMERIC",
        ABBREVIATED = "ABBREVIATED",
    }
}

export type SMSCode = {
    code: string
    compulsory: boolean
    dataElement: DataElement
    formula: string
    optionId: CategoryOptionCombo
    trackedEntityAttribute: TrackedEntityAttribute
}

export type SMSCommand = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    codeValueSeparator: string
    completenessMethod: SMSCommand.completenessMethod
    created: string
    createdBy: User
    currentPeriodUsedForReporting: boolean
    dataset: DataSet
    defaultMessage: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    moreThanOneOrgUnitMessage: string
    name: string
    noUserMessage: string
    parserType: SMSCommand.parserType
    program: Program
    programStage: ProgramStage
    publicAccess: string
    receivedMessage: string
    separator: string
    sharing: Sharing
    smsCodes: Array<SMSCode>
    specialCharacters: Array<SMSSpecialCharacter>
    successMessage: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroup: UserGroup
    userGroupAccesses: Array<UserGroupAccess>
    wrongFormatMessage: string
}

export namespace SMSCommand {
    export enum completenessMethod {
        ALL_DATAVALUE = "ALL_DATAVALUE",
        AT_LEAST_ONE_DATAVALUE = "AT_LEAST_ONE_DATAVALUE",
        DO_NOT_MARK_COMPLETE = "DO_NOT_MARK_COMPLETE",
    }

    export enum parserType {
        KEY_VALUE_PARSER = "KEY_VALUE_PARSER",
        J2ME_PARSER = "J2ME_PARSER",
        ALERT_PARSER = "ALERT_PARSER",
        UNREGISTERED_PARSER = "UNREGISTERED_PARSER",
        TRACKED_ENTITY_REGISTRATION_PARSER = "TRACKED_ENTITY_REGISTRATION_PARSER",
        PROGRAM_STAGE_DATAENTRY_PARSER = "PROGRAM_STAGE_DATAENTRY_PARSER",
        EVENT_REGISTRATION_PARSER = "EVENT_REGISTRATION_PARSER",
    }
}

export type SmsConfiguration = {
    gateways: Array<
        | BulkSmsGatewayConfig
        | GenericHttpGatewayConfig
        | ClickatellGatewayConfig
        | SMPPGatewayConfig
    >
}

export type SmsJobParameters = {
    message: string
    recipientsList: Array<string>
    smsSubject: string
}

export type SMSSpecialCharacter = {
    name: string
    value: string
}

export type Source = {
    params: SourceParams
    requests: Array<SourceRequest>
}

export type SourceParams = {
    periodTypes: Array<
        | "BI_MONTHLY"
        | "BI_WEEKLY"
        | "DAILY"
        | "FINANCIAL_APRIL"
        | "FINANCIAL_JULY"
        | "FINANCIAL_NOV"
        | "FINANCIAL_OCT"
        | "MONTHLY"
        | "QUARTERLY"
        | "SIX_MONTHLY_APRIL"
        | "SIX_MONTHLY_NOV"
        | "SIX_MONTHLY"
        | "TWO_YEARLY"
        | "WEEKLY"
        | "WEEKLY_SATURDAY"
        | "WEEKLY_SUNDAY"
        | "WEEKLY_THURSDAY"
        | "WEEKLY_WEDNESDAY"
        | "YEARLY"
    >
}

export type SourceRequest = {
    dx: Array<string>
    filters: Array<Filter>
    inputIdScheme: string
    name: string
    ou: Array<string>
    outputDataElementIdScheme: string
    outputIdScheme: string
    outputOrgUnitIdScheme: string
    pe: Array<string>
    visualization: string
}

export type Spacing = {
    column: number
    row: number
}

export type SqlView = {
    access: Access
    attributeValues: Array<AttributeValue>
    cacheStrategy: SqlView.cacheStrategy
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    sqlQuery: string
    translations: Array<Translation>
    type: SqlView.type
    updateJobId: string
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace SqlView {
    export enum cacheStrategy {
        NO_CACHE = "NO_CACHE",
        CACHE_1_MINUTE = "CACHE_1_MINUTE",
        CACHE_5_MINUTES = "CACHE_5_MINUTES",
        CACHE_10_MINUTES = "CACHE_10_MINUTES",
        CACHE_15_MINUTES = "CACHE_15_MINUTES",
        CACHE_30_MINUTES = "CACHE_30_MINUTES",
        CACHE_1_HOUR = "CACHE_1_HOUR",
        CACHE_6AM_TOMORROW = "CACHE_6AM_TOMORROW",
        CACHE_TWO_WEEKS = "CACHE_TWO_WEEKS",
        RESPECT_SYSTEM_SETTING = "RESPECT_SYSTEM_SETTING",
    }

    export enum type {
        VIEW = "VIEW",
        MATERIALIZED_VIEW = "MATERIALIZED_VIEW",
        QUERY = "QUERY",
    }
}

export type SqlViewUpdateParameters = {
    sqlViews: Array<string>
}

export type Stage = {
    complete: boolean
    completedTime: string
    description: string
    duration: number
    error: string
    items: Array<Item>
    onFailure: Stage.onFailure
    status: Stage.status
    summary: string
    totalItems: number
}

export namespace Stage {
    export enum onFailure {
        PARENT = "PARENT",
        FAIL = "FAIL",
        SKIP_STAGE = "SKIP_STAGE",
        SKIP_ITEM = "SKIP_ITEM",
        SKIP_ITEM_OUTLIER = "SKIP_ITEM_OUTLIER",
    }

    export enum status {
        RUNNING = "RUNNING",
        SUCCESS = "SUCCESS",
        ERROR = "ERROR",
        CANCELLED = "CANCELLED",
    }
}

export type Stats = {
    created: number
    deleted: number
    ignored: number
    total: number
    updated: number
}

export type StyledObject = {
    fontStyle: FontStyle
    text: string
    textMode: StyledObject.textMode
}

export namespace StyledObject {
    export enum textMode {
        AUTO = "AUTO",
        CUSTOM = "CUSTOM",
    }
}

export type StyleObject = {
    key: string
    name: string
    path: string
}

export type SystemInfo = {
    buildTime: string
    calendar: string
    clusterHostname: string
    contextPath: string
    cpuCores: number
    databaseInfo: DatabaseInfo
    dateFormat: string
    emailConfigured: boolean
    encryption: boolean
    environmentVariable: string
    externalDirectory: string
    fileStoreProvider: string
    instanceBaseUrl: string
    intervalSinceLastAnalyticsTablePartitionSuccess: string
    intervalSinceLastAnalyticsTableSuccess: string
    isMetadataSyncEnabled: boolean
    isMetadataVersionEnabled: boolean
    jasperReportsVersion: string
    javaOpts: string
    javaVendor: string
    javaVersion: string
    lastAnalyticsTablePartitionRuntime: string
    lastAnalyticsTablePartitionSuccess: string
    lastAnalyticsTableRuntime: string
    lastAnalyticsTableSuccess: string
    lastMetadataVersionSyncAttempt: string
    lastSystemMonitoringSuccess: string
    memoryInfo: string
    nodeId: string
    osArchitecture: string
    osName: string
    osVersion: string
    readOnlyMode: string
    readReplicaCount: number
    redisEnabled: boolean
    redisHostname: string
    revision: string
    serverDate: string
    serverTimeZoneDisplayName: string
    serverTimeZoneId: string
    systemId: string
    systemMetadataVersion: string
    systemMonitoringUrl: string
    systemName: string
    userAgent: string
    version: string
}

export type Target = {
    api: Api
    request: TargetRequest
    type: Target.type
}

export namespace Target {
    export enum type {
        INTERNAL = "INTERNAL",
        EXTERNAL = "EXTERNAL",
    }
}

export type TargetRequest = {
    categoryOptionComboIdScheme: string
    dataElementIdScheme: string
    idScheme: string
    orgUnitIdScheme: string
}

export type TestJobParameters = {
    failAtItem: number
    failAtStage: number
    failWithException: boolean
    failWithMessage: string
    failWithPolicy: TestJobParameters.failWithPolicy
    itemDuration: number
    items: number
    runStagesParallel: boolean
    stages: number
    waitMillis: number
}

export namespace TestJobParameters {
    export enum failWithPolicy {
        PARENT = "PARENT",
        FAIL = "FAIL",
        SKIP_STAGE = "SKIP_STAGE",
        SKIP_ITEM = "SKIP_ITEM",
        SKIP_ITEM_OUTLIER = "SKIP_ITEM_OUTLIER",
    }
}

export type TimingsStats = {
    timers: Record<string, string>
}

export type TrackedEntity = {
    attributes: Array<WebapiControllerTrackerView_Attribute>
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    deleted: boolean
    enrollments: Array<WebapiControllerTrackerViewRelationshipItem_Enrollment>
    geometry: Record<string, any>
    inactive: boolean
    orgUnit: string
    potentialDuplicate: boolean
    programOwners: Array<WebapiControllerTrackerView_ProgramOwner>
    storedBy: string
    trackedEntity: string
    trackedEntityType: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export type TrackedEntityAttribute = {
    access: Access
    aggregationType: TrackedEntityAttribute.aggregationType
    attributeValues: Array<AttributeValue>
    code: string
    confidential: boolean
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    displayDescription: string
    displayFormName: string
    displayInListNoProgram: boolean
    displayName: string
    displayOnVisitSchedule: boolean
    displayShortName: string
    expression: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    fieldMask: string
    formName: string
    generated: boolean
    href: string
    id: string
    inherit: boolean
    lastUpdated: string
    lastUpdatedBy: User
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    optionSet: OptionSet
    optionSetValue: boolean
    orgunitScope: boolean
    pattern: string
    publicAccess: string
    queryMods: QueryModifiers
    sharing: Sharing
    shortName: string
    skipSynchronization: boolean
    sortOrderInListNoProgram: number
    sortOrderInVisitSchedule: number
    style: ObjectStyle
    translations: Array<Translation>
    unique: boolean
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    valueType: TrackedEntityAttribute.valueType
}

export namespace TrackedEntityAttribute {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type TrackedEntityAttributeDimension = {
    attribute: TrackedEntityAttribute
    filter: string
    legendSet: LegendSet
}

export type TrackedEntityDataElementDimension = {
    dataElement: DataElement
    filter: string
    legendSet: LegendSet
    programStage: ProgramStage
}

export type TrackedEntityInstanceFilter = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayName: string
    enrollmentCreatedPeriod: FilterPeriod
    enrollmentStatus: TrackedEntityInstanceFilter.enrollmentStatus
    entityQueryCriteria: EntityQueryCriteria
    eventFilters: Array<EventFilter>
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    followup: boolean
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    program: Program
    publicAccess: string
    sharing: Sharing
    sortOrder: number
    style: ObjectStyle
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace TrackedEntityInstanceFilter {
    export enum enrollmentStatus {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }
}

export type TrackedEntityProgramIndicatorDimension = {
    filter: string
    legendSet: LegendSet
    programIndicator: ProgramIndicator
}

export type TrackedEntityType = {
    access: Access
    allowAuditLog: boolean
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayDescription: string
    displayFormName: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    featureType: TrackedEntityType.featureType
    formName: string
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    maxTeiCountToReturn: number
    minAttributesRequiredToSearch: number
    name: string
    publicAccess: string
    sharing: Sharing
    shortName: string
    style: ObjectStyle
    trackedEntityTypeAttributes: Array<Ref_TrackedEntityTypeAttribute>
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
}

export namespace TrackedEntityType {
    export enum featureType {
        NONE = "NONE",
        MULTI_POLYGON = "MULTI_POLYGON",
        POLYGON = "POLYGON",
        POINT = "POINT",
        SYMBOL = "SYMBOL",
    }
}

export type TrackerDataView = {
    /**
     * The exact type is unknown.
     * (Java type was: `java.util.LinkedHashSet<java.lang.String>`)
     */
    attributes: any
    /**
     * The exact type is unknown.
     * (Java type was: `java.util.LinkedHashSet<java.lang.String>`)
     */
    dataElements: any
}

export type TrackerIdSchemeParam = {
    attributeUid: string
    idScheme: TrackerIdSchemeParam.idScheme
}

export namespace TrackerIdSchemeParam {
    export enum idScheme {
        UID = "UID",
        CODE = "CODE",
        NAME = "NAME",
        ATTRIBUTE = "ATTRIBUTE",
    }
}

export type TrackerProgramsDataSynchronizationJobParameters = {
    pageSize: number
}

export type TrackerReport_ImportReport = {
    bundleReport: PersistenceReport
    message: string
    stats: TrackerReport_Stats
    status: TrackerReport_ImportReport.status
    timingsStats: TimingsStats
    validationReport: ValidationReport
}

export namespace TrackerReport_ImportReport {
    export enum status {
        OK = "OK",
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
}

export type TrackerReport_Stats = {
    created: number
    deleted: number
    ignored: number
    total: number
    updated: number
}

export type TrackerTrigramIndexJobParameters = {
    attributes: Array<string>
    skipIndexDeletion: boolean
}

export type TrackerTypeReport = {
    objectReports: Array<Entity>
    stats: TrackerReport_Stats
    trackerType: TrackerTypeReport.trackerType
}

export namespace TrackerTypeReport {
    export enum trackerType {
        TRACKED_ENTITY = "TRACKED_ENTITY",
        ENROLLMENT = "ENROLLMENT",
        EVENT = "EVENT",
        RELATIONSHIP = "RELATIONSHIP",
    }
}

export type Translation = {
    locale: string
    property: string
    value: string
}

export type TrigramSummary = {
    indexableAttributes: Array<Record<string, any>>
    indexedAttributes: Array<Record<string, any>>
    obsoleteIndexedAttributes: Array<Record<string, any>>
}

export type TypeReport = {
    klass: string
    objectReports: Array<ObjectReport>
    stats: Stats
}

export type UID_CategoryCombo = string
export type UID_CategoryOption = string
export type UID_CategoryOptionCombo = string
export type UID_DataApprovalWorkflow = string
export type UID_DataElement = string
export type UID_DataSet = string
export type UID_JobConfiguration = string
export type UID_OrganisationUnit = string

export type UpdateFollowUpForDataValuesRequest = {
    followups: Array<FollowupParams>
}

export type User = {
    access: Access
    accountExpiry: string
    attributeValues: Array<AttributeValue>
    avatar: FileResource
    birthday: string
    catDimensionConstraints: Array<Category>
    code: string
    cogsDimensionConstraints: Array<CategoryOptionGroupSet>
    created: string
    createdBy: User
    dataViewMaxOrganisationUnitLevel: number
    dataViewOrganisationUnits: Array<OrganisationUnit>
    disabled: boolean
    displayName: string
    education: string
    email: string
    employer: string
    externalAccess: boolean
    externalAuth: boolean
    facebookMessenger: string
    favorite: boolean
    favorites: Array<string>
    firstName: string
    gender: string
    href: string
    id: string
    interests: string
    introduction: string
    invitation: boolean
    jobTitle: string
    languages: string
    lastCheckedInterpretations: string
    lastLogin: string
    lastUpdated: string
    lastUpdatedBy: User
    ldapId: string
    nationality: string
    openId: string
    organisationUnits: Array<OrganisationUnit>
    password: string
    passwordLastUpdated: string
    phoneNumber: string
    publicAccess: string
    selfRegistered: boolean
    settings: UserSettings
    sharing: Sharing
    skype: string
    surname: string
    teiSearchOrganisationUnits: Array<OrganisationUnit>
    telegram: string
    translations: Array<Translation>
    twitter: string
    twoFactorEnabled: boolean
    user: User
    userAccesses: Array<UserAccess>
    userCredentials: UserCredentialsDto
    userGroupAccesses: Array<UserGroupAccess>
    userGroups: Array<UserGroup>
    userRoles: Array<UserRole>
    username: string
    welcomeMessage: string
    whatsApp: string
}

export type UserAccess = {
    access: string
    displayName: string
    id: string
    userUid: string
}

export type UserCredentialsDto = {
    access: Access
    accountExpiry: string
    catDimensionConstraints: Array<Category>
    cogsDimensionConstraints: Array<CategoryOptionGroupSet>
    disabled: boolean
    externalAuth: boolean
    id: string
    idToken: string
    invitation: boolean
    lastLogin: string
    ldapId: string
    openId: string
    password: string
    passwordLastUpdated: string
    previousPasswords: Array<string>
    restoreExpiry: string
    restoreToken: string
    selfRegistered: boolean
    sharing: Sharing
    twoFA: boolean
    uid: string
    userRoles: Array<UserRole>
    username: string
    uuid: string
}

export type UserGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    managedByGroups: Array<UserGroup>
    managedGroups: Array<UserGroup>
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    users: Array<User>
}

export type UserGroupAccess = {
    access: string
    displayName: string
    id: string
    userGroupUid: string
}

export type UserInfoSnapshot = {
    firstName: string
    surname: string
    uid: string
    username: string
}

export type UserLookup = {
    displayName: string
    firstName: string
    id: string
    surname: string
    username: string
}

export type UserLookups = {
    users: Array<UserLookup>
}

export type UserMessage = {
    followUp: boolean
    key: string
    read: boolean
    user: User
}

export type UserRole = {
    access: Access
    attributeValues: Array<AttributeValue>
    authorities: Array<string>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    restrictions: Array<string>
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    users: Array<User>
}

export type UserSettings = {
    analysisDisplayProperty: UserSettings.analysisDisplayProperty
    dbLocale: string
    messageEmailNotification: boolean
    messageSmsNotification: boolean
    style: string
    trackerDashboardLayout: string
    uiLocale: string
}

export namespace UserSettings {
    export enum analysisDisplayProperty {
        NAME = "NAME",
        SHORTNAME = "SHORTNAME",
    }
}

export type UserSharing_UserAccess = {
    access: string
    displayName: string
    id: string
}

export type UserSharing_UserGroupAccess = {
    access: string
    displayName: string
    id: string
}

export type ValidationNotificationTemplate = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    displayMessageTemplate: string
    displayName: string
    displaySubjectTemplate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    messageTemplate: string
    name: string
    notifyParentOrganisationUnitOnly: boolean
    notifyUsersInHierarchyOnly: boolean
    publicAccess: string
    recipientUserGroups: Array<UserGroup>
    sendStrategy: ValidationNotificationTemplate.sendStrategy
    sharing: Sharing
    subjectTemplate: string
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    validationRules: Array<ValidationRule>
}

export namespace ValidationNotificationTemplate {
    export enum sendStrategy {
        COLLECTIVE_SUMMARY = "COLLECTIVE_SUMMARY",
        SINGLE_NOTIFICATION = "SINGLE_NOTIFICATION",
    }
}

export type ValidationReport = {
    errorReports: Array<Error>
    warningReports: Array<Warning>
}

export type ValidationResult = {
    attributeOptionCombo: CategoryOptionCombo
    created: string
    dayInPeriod: number
    id: number
    leftsideValue: number
    notificationSent: boolean
    organisationUnit: OrganisationUnit
    period: string
    rightsideValue: number
    validationRule: ValidationRule
}

export type ValidationResultView = {
    attributeOptionComboDisplayName: string
    attributeOptionComboId: string
    importance: string
    leftSideValue: number
    operator: string
    organisationUnitAncestorNames: string
    organisationUnitDisplayName: string
    organisationUnitId: string
    organisationUnitPath: string
    periodDisplayName: string
    periodId: string
    rightSideValue: number
    validationRuleDescription: string
    validationRuleId: string
}

export type ValidationRule = {
    access: Access
    aggregateExportAttributeOptionCombo: string
    aggregateExportCategoryOptionCombo: string
    aggregationType: ValidationRule.aggregationType
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    dimensionItem: string
    dimensionItemType: ValidationRule.dimensionItemType
    displayDescription: string
    displayFormName: string
    displayInstruction: string
    displayName: string
    displayShortName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    formName: string
    href: string
    id: string
    importance: ValidationRule.importance
    instruction: string
    lastUpdated: string
    lastUpdatedBy: User
    leftSide: Expression
    legendSet: LegendSet
    legendSets: Array<LegendSet>
    name: string
    notificationTemplates: Array<ValidationNotificationTemplate>
    operator: ValidationRule.operator
    organisationUnitLevels: Array<number>
    periodType: ValidationRule.periodType
    publicAccess: string
    queryMods: QueryModifiers
    rightSide: Expression
    sharing: Sharing
    shortName: string
    skipFormValidation: boolean
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    validationRuleGroups: Array<ValidationRuleGroup>
}

export namespace ValidationRule {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum dimensionItemType {
        DATA_ELEMENT = "DATA_ELEMENT",
        DATA_ELEMENT_OPERAND = "DATA_ELEMENT_OPERAND",
        INDICATOR = "INDICATOR",
        REPORTING_RATE = "REPORTING_RATE",
        PROGRAM_DATA_ELEMENT = "PROGRAM_DATA_ELEMENT",
        PROGRAM_ATTRIBUTE = "PROGRAM_ATTRIBUTE",
        PROGRAM_INDICATOR = "PROGRAM_INDICATOR",
        PERIOD = "PERIOD",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        CATEGORY_OPTION = "CATEGORY_OPTION",
        OPTION_GROUP = "OPTION_GROUP",
        DATA_ELEMENT_GROUP = "DATA_ELEMENT_GROUP",
        ORGANISATION_UNIT_GROUP = "ORGANISATION_UNIT_GROUP",
        CATEGORY_OPTION_GROUP = "CATEGORY_OPTION_GROUP",
        EXPRESSION_DIMENSION_ITEM = "EXPRESSION_DIMENSION_ITEM",
    }

    export enum importance {
        HIGH = "HIGH",
        MEDIUM = "MEDIUM",
        LOW = "LOW",
    }

    export enum operator {
        EQUAL_TO = "equal_to",
        NOT_EQUAL_TO = "not_equal_to",
        GREATER_THAN = "greater_than",
        GREATER_THAN_OR_EQUAL_TO = "greater_than_or_equal_to",
        LESS_THAN = "less_than",
        LESS_THAN_OR_EQUAL_TO = "less_than_or_equal_to",
        COMPULSORY_PAIR = "compulsory_pair",
        EXCLUSIVE_PAIR = "exclusive_pair",
    }

    export enum periodType {
        BI_MONTHLY = "BiMonthly",
        BI_WEEKLY = "BiWeekly",
        DAILY = "Daily",
        FINANCIAL_APRIL = "FinancialApril",
        FINANCIAL_JULY = "FinancialJuly",
        FINANCIAL_NOV = "FinancialNov",
        FINANCIAL_OCT = "FinancialOct",
        MONTHLY = "Monthly",
        QUARTERLY = "Quarterly",
        SIX_MONTHLY_APRIL = "SixMonthlyApril",
        SIX_MONTHLY_NOV = "SixMonthlyNov",
        SIX_MONTHLY = "SixMonthly",
        TWO_YEARLY = "TwoYearly",
        WEEKLY = "Weekly",
        WEEKLY_SATURDAY = "WeeklySaturday",
        WEEKLY_SUNDAY = "WeeklySunday",
        WEEKLY_THURSDAY = "WeeklyThursday",
        WEEKLY_WEDNESDAY = "WeeklyWednesday",
        YEARLY = "Yearly",
    }
}

export type ValidationRuleExpressionDetails = {
    leftSide: Array<Record<string, string>>
    rightSide: Array<Record<string, string>>
}

export type ValidationRuleGroup = {
    access: Access
    attributeValues: Array<AttributeValue>
    code: string
    created: string
    createdBy: User
    description: string
    displayName: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    href: string
    id: string
    lastUpdated: string
    lastUpdatedBy: User
    name: string
    publicAccess: string
    sharing: Sharing
    translations: Array<Translation>
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    validationRules: Array<ValidationRule>
}

export type ValidationRulesAnalysisParams = {
    endDate: string
    notification: boolean
    ou: string
    persist: boolean
    startDate: string
    vrg: string
}

export type ValidationSummary = {
    commentRequiredViolations: Array<Ref_DataElementOperand>
    validationRuleViolations: Array<ValidationResult>
}

export type ValueTypeOptions = {
    allowedContentTypes: Array<string>
    maxFileSize: number
    version: number
}

export type Visualization = {
    access: Access
    aggregationType: Visualization.aggregationType
    attributeDimensions: Array<TrackedEntityAttributeDimension>
    attributeValues: Array<AttributeValue>
    axes: Array<AxisV2>
    baseLineLabel: string
    baseLineValue: number
    categoryDimensions: Array<CategoryDimension>
    categoryOptionGroupSetDimensions: Array<CategoryOptionGroupSetDimension>
    code: string
    colSubTotals: boolean
    colTotals: boolean
    colorSet: string
    columnDimensions: Array<string>
    columns: Array<DimensionalObject>
    completedOnly: boolean
    created: string
    createdBy: User
    cumulativeValues: boolean
    dataDimensionItems: Array<DataDimensionItem>
    dataElementDimensions: Array<TrackedEntityDataElementDimension>
    dataElementGroupSetDimensions: Array<DataElementGroupSetDimension>
    description: string
    digitGroupSeparator: Visualization.digitGroupSeparator
    displayBaseLineLabel: string
    displayDensity: Visualization.displayDensity
    displayDescription: string
    displayDomainAxisLabel: string
    displayFormName: string
    displayName: string
    displayRangeAxisLabel: string
    displayShortName: string
    displaySubtitle: string
    displayTargetLineLabel: string
    displayTitle: string
    domainAxisLabel: string
    endDate: string
    externalAccess: boolean
    favorite: boolean
    favorites: Array<string>
    filterDimensions: Array<string>
    filters: Array<DimensionalObject>
    fixColumnHeaders: boolean
    fixRowHeaders: boolean
    fontSize: Visualization.fontSize
    fontStyle: VisualizationFontStyle
    formName: string
    hideEmptyColumns: boolean
    hideEmptyRowItems: Visualization.hideEmptyRowItems
    hideEmptyRows: boolean
    hideLegend: boolean
    hideSubtitle: boolean
    hideTitle: boolean
    href: string
    icons: Array<Icon>
    id: string
    interpretations: Array<Interpretation>
    itemOrganisationUnitGroups: Array<OrganisationUnitGroup>
    lastUpdated: string
    lastUpdatedBy: User
    legend: LegendDefinitions
    measureCriteria: string
    name: string
    noSpaceBetweenColumns: boolean
    numberType: Visualization.numberType
    optionalAxes: Array<Axis>
    orgUnitField: string
    organisationUnitGroupSetDimensions: Array<OrganisationUnitGroupSetDimension>
    organisationUnitLevels: Array<number>
    organisationUnits: Array<OrganisationUnit>
    outlierAnalysis: OutlierAnalysis
    parentGraphMap: Record<string, string>
    percentStackedValues: boolean
    periods: Array<string>
    programIndicatorDimensions: Array<TrackedEntityProgramIndicatorDimension>
    publicAccess: string
    rangeAxisDecimals: number
    rangeAxisLabel: string
    rangeAxisMaxValue: number
    rangeAxisMinValue: number
    rangeAxisSteps: number
    regression: boolean
    regressionType: Visualization.regressionType
    relativePeriods: RelativePeriods
    reportingParams: ReportingParams
    rowDimensions: Array<string>
    rowSubTotals: boolean
    rowTotals: boolean
    rows: Array<DimensionalObject>
    series: Array<Series>
    seriesKey: SeriesKey
    sharing: Sharing
    shortName: string
    showData: boolean
    showDimensionLabels: boolean
    showHierarchy: boolean
    skipRounding: boolean
    sortOrder: number
    startDate: string
    subscribed: boolean
    subscribers: Array<string>
    subtitle: string
    targetLineLabel: string
    targetLineValue: number
    timeField: string
    title: string
    topLimit: number
    translations: Array<Translation>
    type: Visualization.type
    user: User
    userAccesses: Array<UserAccess>
    userGroupAccesses: Array<UserGroupAccess>
    userOrgUnitType: Visualization.userOrgUnitType
    userOrganisationUnit: boolean
    userOrganisationUnitChildren: boolean
    userOrganisationUnitGrandChildren: boolean
    visualizationPeriodName: string
    yearlySeries: Array<string>
}

export namespace Visualization {
    export enum aggregationType {
        SUM = "SUM",
        AVERAGE = "AVERAGE",
        AVERAGE_SUM_ORG_UNIT = "AVERAGE_SUM_ORG_UNIT",
        LAST = "LAST",
        LAST_AVERAGE_ORG_UNIT = "LAST_AVERAGE_ORG_UNIT",
        LAST_LAST_ORG_UNIT = "LAST_LAST_ORG_UNIT",
        LAST_IN_PERIOD = "LAST_IN_PERIOD",
        LAST_IN_PERIOD_AVERAGE_ORG_UNIT = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
        FIRST = "FIRST",
        FIRST_AVERAGE_ORG_UNIT = "FIRST_AVERAGE_ORG_UNIT",
        FIRST_FIRST_ORG_UNIT = "FIRST_FIRST_ORG_UNIT",
        COUNT = "COUNT",
        STDDEV = "STDDEV",
        VARIANCE = "VARIANCE",
        MIN = "MIN",
        MAX = "MAX",
        MIN_SUM_ORG_UNIT = "MIN_SUM_ORG_UNIT",
        MAX_SUM_ORG_UNIT = "MAX_SUM_ORG_UNIT",
        NONE = "NONE",
        CUSTOM = "CUSTOM",
        DEFAULT = "DEFAULT",
    }

    export enum digitGroupSeparator {
        COMMA = "COMMA",
        SPACE = "SPACE",
        NONE = "NONE",
    }

    export enum displayDensity {
        COMFORTABLE = "COMFORTABLE",
        NORMAL = "NORMAL",
        COMPACT = "COMPACT",
        NONE = "NONE",
    }

    export enum fontSize {
        LARGE = "LARGE",
        NORMAL = "NORMAL",
        SMALL = "SMALL",
    }

    export enum hideEmptyRowItems {
        NONE = "NONE",
        BEFORE_FIRST = "BEFORE_FIRST",
        AFTER_LAST = "AFTER_LAST",
        BEFORE_FIRST_AFTER_LAST = "BEFORE_FIRST_AFTER_LAST",
        ALL = "ALL",
    }

    export enum numberType {
        VALUE = "VALUE",
        ROW_PERCENTAGE = "ROW_PERCENTAGE",
        COLUMN_PERCENTAGE = "COLUMN_PERCENTAGE",
    }

    export enum regressionType {
        NONE = "NONE",
        LINEAR = "LINEAR",
        POLYNOMIAL = "POLYNOMIAL",
        LOESS = "LOESS",
    }

    export enum type {
        COLUMN = "COLUMN",
        STACKED_COLUMN = "STACKED_COLUMN",
        BAR = "BAR",
        STACKED_BAR = "STACKED_BAR",
        LINE = "LINE",
        AREA = "AREA",
        STACKED_AREA = "STACKED_AREA",
        PIE = "PIE",
        RADAR = "RADAR",
        GAUGE = "GAUGE",
        YEAR_OVER_YEAR_LINE = "YEAR_OVER_YEAR_LINE",
        YEAR_OVER_YEAR_COLUMN = "YEAR_OVER_YEAR_COLUMN",
        SCATTER = "SCATTER",
        BUBBLE = "BUBBLE",
        SINGLE_VALUE = "SINGLE_VALUE",
        PIVOT_TABLE = "PIVOT_TABLE",
    }

    export enum userOrgUnitType {
        DATA_CAPTURE = "DATA_CAPTURE",
        DATA_OUTPUT = "DATA_OUTPUT",
        TEI_SEARCH = "TEI_SEARCH",
    }
}

export type VisualizationFontStyle = {
    baseLineLabel: FontStyle
    categoryAxisLabel: FontStyle
    horizontalAxisTitle: FontStyle
    legend: FontStyle
    seriesAxisLabel: FontStyle
    targetLineLabel: FontStyle
    verticalAxisTitle: FontStyle
    visualizationSubtitle: FontStyle
    visualizationTitle: FontStyle
}

export type Warning = {
    message: string
    trackerType: string
    uid: string
    warningCode: string
}

export type WebapiControllerDatastoreController_Pager = {
    page: number
    pageSize: number
}

export type WebapiControllerTrackerView_Attribute = {
    attribute: string
    code: string
    createdAt: string | number
    displayName: string
    storedBy: string
    updatedAt: string | number
    value: string
    valueType: WebapiControllerTrackerView_Attribute.valueType
}

export namespace WebapiControllerTrackerView_Attribute {
    export enum valueType {
        TEXT = "TEXT",
        LONG_TEXT = "LONG_TEXT",
        MULTI_TEXT = "MULTI_TEXT",
        LETTER = "LETTER",
        PHONE_NUMBER = "PHONE_NUMBER",
        EMAIL = "EMAIL",
        BOOLEAN = "BOOLEAN",
        TRUE_ONLY = "TRUE_ONLY",
        DATE = "DATE",
        DATETIME = "DATETIME",
        TIME = "TIME",
        NUMBER = "NUMBER",
        UNIT_INTERVAL = "UNIT_INTERVAL",
        PERCENTAGE = "PERCENTAGE",
        INTEGER = "INTEGER",
        INTEGER_POSITIVE = "INTEGER_POSITIVE",
        INTEGER_NEGATIVE = "INTEGER_NEGATIVE",
        INTEGER_ZERO_OR_POSITIVE = "INTEGER_ZERO_OR_POSITIVE",
        TRACKER_ASSOCIATE = "TRACKER_ASSOCIATE",
        USERNAME = "USERNAME",
        COORDINATE = "COORDINATE",
        ORGANISATION_UNIT = "ORGANISATION_UNIT",
        REFERENCE = "REFERENCE",
        AGE = "AGE",
        URL = "URL",
        FILE_RESOURCE = "FILE_RESOURCE",
        IMAGE = "IMAGE",
        GEOJSON = "GEOJSON",
    }
}

export type WebapiControllerTrackerView_DataValue = {
    createdAt: string | number
    createdBy: WebapiControllerTrackerView_User
    dataElement: string
    providedElsewhere: boolean
    storedBy: string
    updatedAt: string | number
    updatedBy: WebapiControllerTrackerView_User
    value: string
}

export type WebapiControllerTrackerView_Enrollment = {
    attributes: Array<WebapiControllerTrackerView_Attribute>
    completedAt: string | number
    completedBy: string
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    deleted: boolean
    enrolledAt: string | number
    enrollment: string
    events: Array<WebapiControllerTrackerView_Event>
    followUp: boolean
    geometry: Record<string, any>
    notes: Array<WebapiControllerTrackerView_Note>
    occurredAt: string | number
    orgUnit: string
    orgUnitName: string
    program: string
    relationships: Array<WebapiControllerTrackerView_Relationship>
    status: WebapiControllerTrackerView_Enrollment.status
    storedBy: string
    trackedEntity: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export namespace WebapiControllerTrackerView_Enrollment {
    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }
}

export type WebapiControllerTrackerView_Event = {
    assignedUser: WebapiControllerTrackerView_User
    attributeCategoryOptions: string
    attributeOptionCombo: string
    completedAt: string | number
    completedBy: string
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    dataValues: Array<WebapiControllerTrackerView_DataValue>
    deleted: boolean
    enrollment: string
    event: string
    followup: boolean
    geometry: Record<string, any>
    notes: Array<WebapiControllerTrackerView_Note>
    occurredAt: string | number
    orgUnit: string
    orgUnitName: string
    program: string
    programStage: string
    relationships: Array<WebapiControllerTrackerView_Relationship>
    scheduledAt: string | number
    status: WebapiControllerTrackerView_Event.status
    storedBy: string
    trackedEntity: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export namespace WebapiControllerTrackerView_Event {
    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }
}

export type WebapiControllerTrackerView_Note = {
    createdBy: WebapiControllerTrackerView_User
    note: string
    storedAt: string | number
    storedBy: string
    value: string
}

export type WebapiControllerTrackerView_ProgramOwner = {
    orgUnit: string
    program: string
    trackedEntity: string
}

export type WebapiControllerTrackerView_Relationship = {
    bidirectional: boolean
    createdAt: string | number
    from: WebapiControllerTrackerView_RelationshipItem
    relationship: string
    relationshipName: string
    relationshipType: string
    to: WebapiControllerTrackerView_RelationshipItem
    updatedAt: string | number
}

export type WebapiControllerTrackerView_RelationshipItem = {
    enrollment: WebapiControllerTrackerViewRelationshipItem_Enrollment
    event: WebapiControllerTrackerViewRelationshipItem_Event
    trackedEntity: TrackedEntity
}

export type WebapiControllerTrackerView_TrackedEntity = {
    attributes: Array<WebapiControllerTrackerView_Attribute>
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    deleted: boolean
    enrollments: Array<WebapiControllerTrackerView_Enrollment>
    geometry: Record<string, any>
    inactive: boolean
    orgUnit: string
    potentialDuplicate: boolean
    programOwners: Array<WebapiControllerTrackerView_ProgramOwner>
    relationships: Array<WebapiControllerTrackerView_Relationship>
    storedBy: string
    trackedEntity: string
    trackedEntityType: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export type WebapiControllerTrackerView_User = {
    displayName: string
    firstName: string
    surname: string
    uid: string
    username: string
}

export type WebapiControllerTrackerViewRelationshipItem_Enrollment = {
    attributes: Array<WebapiControllerTrackerView_Attribute>
    completedAt: string | number
    completedBy: string
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    deleted: boolean
    enrolledAt: string | number
    enrollment: string
    events: Array<WebapiControllerTrackerViewRelationshipItem_Event>
    followUp: boolean
    geometry: Record<string, any>
    notes: Array<WebapiControllerTrackerView_Note>
    occurredAt: string | number
    orgUnit: string
    orgUnitName: string
    program: string
    status: WebapiControllerTrackerViewRelationshipItem_Enrollment.status
    storedBy: string
    trackedEntity: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export namespace WebapiControllerTrackerViewRelationshipItem_Enrollment {
    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        CANCELLED = "CANCELLED",
    }
}

export type WebapiControllerTrackerViewRelationshipItem_Event = {
    assignedUser: WebapiControllerTrackerView_User
    attributeCategoryOptions: string
    attributeOptionCombo: string
    completedAt: string | number
    completedBy: string
    createdAt: string | number
    createdAtClient: string | number
    createdBy: WebapiControllerTrackerView_User
    dataValues: Array<WebapiControllerTrackerView_DataValue>
    deleted: boolean
    enrollment: string
    event: string
    followup: boolean
    geometry: Record<string, any>
    notes: Array<WebapiControllerTrackerView_Note>
    occurredAt: string | number
    orgUnit: string
    orgUnitName: string
    program: string
    programStage: string
    scheduledAt: string | number
    status: WebapiControllerTrackerViewRelationshipItem_Event.status
    storedBy: string
    updatedAt: string | number
    updatedAtClient: string | number
    updatedBy: WebapiControllerTrackerView_User
}

export namespace WebapiControllerTrackerViewRelationshipItem_Event {
    export enum status {
        ACTIVE = "ACTIVE",
        COMPLETED = "COMPLETED",
        VISITED = "VISITED",
        SCHEDULE = "SCHEDULE",
        OVERDUE = "OVERDUE",
        SKIPPED = "SKIPPED",
    }
}

export type WebapiWebdomainForm_Category = {
    categoryOptions: Array<WebapiWebdomainForm_Option>
    id: string
    label: string
}

export type WebapiWebdomainForm_CategoryCombo = {
    categories: Array<WebapiWebdomainForm_Category>
    id: string
}

export type WebapiWebdomainForm_Option = {
    endDate: string
    id: string
    label: string
    organisationUnits: Array<OrganisationUnit>
    startDate: string
}

export type WebApp = {
    appType: WebApp.appType
    created: string
    description: string
    developer: Developer
    id: string
    images: Array<ImageResource>
    lastUpdated: string
    name: string
    owner: string
    reviews: Array<Review>
    sourceUrl: string
    status: WebApp.status
    versions: Array<AppVersion>
}

export namespace WebApp {
    export enum appType {
        APP = "APP",
        RESOURCE = "RESOURCE",
        DASHBOARD_WIDGET = "DASHBOARD_WIDGET",
        TRACKER_DASHBOARD_WIDGET = "TRACKER_DASHBOARD_WIDGET",
    }

    export enum status {
        OK = "OK",
        INVALID_BUNDLED_APP_OVERRIDE = "INVALID_BUNDLED_APP_OVERRIDE",
        INVALID_CORE_APP = "INVALID_CORE_APP",
        NAMESPACE_TAKEN = "NAMESPACE_TAKEN",
        INVALID_ZIP_FORMAT = "INVALID_ZIP_FORMAT",
        MISSING_MANIFEST = "MISSING_MANIFEST",
        INVALID_MANIFEST_JSON = "INVALID_MANIFEST_JSON",
        INSTALLATION_FAILED = "INSTALLATION_FAILED",
        NOT_FOUND = "NOT_FOUND",
        MISSING_SYSTEM_BASE_URL = "MISSING_SYSTEM_BASE_URL",
        APPROVED = "APPROVED",
        PENDING = "PENDING",
        NOT_APPROVED = "NOT_APPROVED",
        DELETION_IN_PROGRESS = "DELETION_IN_PROGRESS",
    }
}

export type WebhookTarget = {
    auth: HttpBasicAuth | ApiTokenAuth
    clientId: string
    contentType: string
    headers: Record<string, string>
    type: string
    url: string
}

export type WebLocale = {
    locale: string
    name: string
}

export type WebMessage = {
    code: number
    devMessage: string
    errorCode: WebMessage.errorCode
    httpStatus: string
    httpStatusCode: number
    message: string
    response: WebMessage
    status: WebMessage.status
}

export namespace WebMessage {
    export enum errorCode {
        E1000 = "E1000",
        E1001 = "E1001",
        E1002 = "E1002",
        E1003 = "E1003",
        E1004 = "E1004",
        E1005 = "E1005",
        E1006 = "E1006",
        E1100 = "E1100",
        E1101 = "E1101",
        E1102 = "E1102",
        E1103 = "E1103",
        E1104 = "E1104",
        E1105 = "E1105",
        E1106 = "E1106",
        E1107 = "E1107",
        E1108 = "E1108",
        E1109 = "E1109",
        E1110 = "E1110",
        E1111 = "E1111",
        E1112 = "E1112",
        E1113 = "E1113",
        E1114 = "E1114",
        E1115 = "E1115",
        E1116 = "E1116",
        E1117 = "E1117",
        E1118 = "E1118",
        E1119 = "E1119",
        E1120 = "E1120",
        E1500 = "E1500",
        E1501 = "E1501",
        E1502 = "E1502",
        E1503 = "E1503",
        E1504 = "E1504",
        E1510 = "E1510",
        E1511 = "E1511",
        E1512 = "E1512",
        E1513 = "E1513",
        E1514 = "E1514",
        E1515 = "E1515",
        E1516 = "E1516",
        E1520 = "E1520",
        E1521 = "E1521",
        E1522 = "E1522",
        E1523 = "E1523",
        E2000 = "E2000",
        E2001 = "E2001",
        E2002 = "E2002",
        E2003 = "E2003",
        E2004 = "E2004",
        E2005 = "E2005",
        E2006 = "E2006",
        E2007 = "E2007",
        E2008 = "E2008",
        E2009 = "E2009",
        E2010 = "E2010",
        E2011 = "E2011",
        E2012 = "E2012",
        E2013 = "E2013",
        E2014 = "E2014",
        E2015 = "E2015",
        E2016 = "E2016",
        E2017 = "E2017",
        E2018 = "E2018",
        E2019 = "E2019",
        E2020 = "E2020",
        E2021 = "E2021",
        E2022 = "E2022",
        E2023 = "E2023",
        E2024 = "E2024",
        E2025 = "E2025",
        E2026 = "E2026",
        E2027 = "E2027",
        E2028 = "E2028",
        E2029 = "E2029",
        E2030 = "E2030",
        E2031 = "E2031",
        E2032 = "E2032",
        E2033 = "E2033",
        E2034 = "E2034",
        E2035 = "E2035",
        E2036 = "E2036",
        E2037 = "E2037",
        E2038 = "E2038",
        E2039 = "E2039",
        E2040 = "E2040",
        E2041 = "E2041",
        E2042 = "E2042",
        E2043 = "E2043",
        E2044 = "E2044",
        E2200 = "E2200",
        E2201 = "E2201",
        E2202 = "E2202",
        E2203 = "E2203",
        E2204 = "E2204",
        E2205 = "E2205",
        E2206 = "E2206",
        E2207 = "E2207",
        E2208 = "E2208",
        E2300 = "E2300",
        E2301 = "E2301",
        E3000 = "E3000",
        E3001 = "E3001",
        E3002 = "E3002",
        E3003 = "E3003",
        E3004 = "E3004",
        E3005 = "E3005",
        E3006 = "E3006",
        E3008 = "E3008",
        E3009 = "E3009",
        E3010 = "E3010",
        E3011 = "E3011",
        E3012 = "E3012",
        E3013 = "E3013",
        E3014 = "E3014",
        E3015 = "E3015",
        E3016 = "E3016",
        E3017 = "E3017",
        E3018 = "E3018",
        E3019 = "E3019",
        E3020 = "E3020",
        E3021 = "E3021",
        E3022 = "E3022",
        E3023 = "E3023",
        E3024 = "E3024",
        E3025 = "E3025",
        E3026 = "E3026",
        E3027 = "E3027",
        E3028 = "E3028",
        E3029 = "E3029",
        E3030 = "E3030",
        E3031 = "E3031",
        E3032 = "E3032",
        E3040 = "E3040",
        E4000 = "E4000",
        E4001 = "E4001",
        E4002 = "E4002",
        E4003 = "E4003",
        E4004 = "E4004",
        E4005 = "E4005",
        E4006 = "E4006",
        E4007 = "E4007",
        E4008 = "E4008",
        E4009 = "E4009",
        E4010 = "E4010",
        E4011 = "E4011",
        E4012 = "E4012",
        E4013 = "E4013",
        E4014 = "E4014",
        E4015 = "E4015",
        E4016 = "E4016",
        E4017 = "E4017",
        E4018 = "E4018",
        E4019 = "E4019",
        E4020 = "E4020",
        E4021 = "E4021",
        E4022 = "E4022",
        E4023 = "E4023",
        E4024 = "E4024",
        E4025 = "E4025",
        E4026 = "E4026",
        E4027 = "E4027",
        E4028 = "E4028",
        E4029 = "E4029",
        E4030 = "E4030",
        E4031 = "E4031",
        E4032 = "E4032",
        E4033 = "E4033",
        E4034 = "E4034",
        E4035 = "E4035",
        E4036 = "E4036",
        E4037 = "E4037",
        E4038 = "E4038",
        E4039 = "E4039",
        E4040 = "E4040",
        E4041 = "E4041",
        E4042 = "E4042",
        E4043 = "E4043",
        E4044 = "E4044",
        E4045 = "E4045",
        E4046 = "E4046",
        E4047 = "E4047",
        E4048 = "E4048",
        E4049 = "E4049",
        E4054 = "E4054",
        E4056 = "E4056",
        E4055 = "E4055",
        E4050 = "E4050",
        E4051 = "E4051",
        E4052 = "E4052",
        E4053 = "E4053",
        E4057 = "E4057",
        E4060 = "E4060",
        E4061 = "E4061",
        E4062 = "E4062",
        E4063 = "E4063",
        E4064 = "E4064",
        E4065 = "E4065",
        E4066 = "E4066",
        E4067 = "E4067",
        E4068 = "E4068",
        E4300 = "E4300",
        E4301 = "E4301",
        E4302 = "E4302",
        E4303 = "E4303",
        E4304 = "E4304",
        E4305 = "E4305",
        E4306 = "E4306",
        E4307 = "E4307",
        E4308 = "E4308",
        E4309 = "E4309",
        E4310 = "E4310",
        E4311 = "E4311",
        E4312 = "E4312",
        E4313 = "E4313",
        E4314 = "E4314",
        E4315 = "E4315",
        E5000 = "E5000",
        E5001 = "E5001",
        E5002 = "E5002",
        E5003 = "E5003",
        E5004 = "E5004",
        E5005 = "E5005",
        E5006 = "E5006",
        E5007 = "E5007",
        E6000 = "E6000",
        E6001 = "E6001",
        E6002 = "E6002",
        E6003 = "E6003",
        E6004 = "E6004",
        E6005 = "E6005",
        E6006 = "E6006",
        E6007 = "E6007",
        E6008 = "E6008",
        E6009 = "E6009",
        E6010 = "E6010",
        E6011 = "E6011",
        E6012 = "E6012",
        E6013 = "E6013",
        E6014 = "E6014",
        E6015 = "E6015",
        E6016 = "E6016",
        E6017 = "E6017",
        E6018 = "E6018",
        E6019 = "E6019",
        E6020 = "E6020",
        E6021 = "E6021",
        E6100 = "E6100",
        E6101 = "E6101",
        E6200 = "E6200",
        E6201 = "E6201",
        E6202 = "E6202",
        E6203 = "E6203",
        E6204 = "E6204",
        E6205 = "E6205",
        E6206 = "E6206",
        E6207 = "E6207",
        E6208 = "E6208",
        E6209 = "E6209",
        E6210 = "E6210",
        E6211 = "E6211",
        E6300 = "E6300",
        E6301 = "E6301",
        E6302 = "E6302",
        E6303 = "E6303",
        E6304 = "E6304",
        E6305 = "E6305",
        E7000 = "E7000",
        E7003 = "E7003",
        E7004 = "E7004",
        E7005 = "E7005",
        E7006 = "E7006",
        E7007 = "E7007",
        E7010 = "E7010",
        E7020 = "E7020",
        E7021 = "E7021",
        E7022 = "E7022",
        E7023 = "E7023",
        E7024 = "E7024",
        E7100 = "E7100",
        E7101 = "E7101",
        E7102 = "E7102",
        E7103 = "E7103",
        E7104 = "E7104",
        E7105 = "E7105",
        E7106 = "E7106",
        E7107 = "E7107",
        E7108 = "E7108",
        E7109 = "E7109",
        E7110 = "E7110",
        E7111 = "E7111",
        E7112 = "E7112",
        E7113 = "E7113",
        E7114 = "E7114",
        E7115 = "E7115",
        E7116 = "E7116",
        E7117 = "E7117",
        E7118 = "E7118",
        E7119 = "E7119",
        E7120 = "E7120",
        E7121 = "E7121",
        E7122 = "E7122",
        E7123 = "E7123",
        E7124 = "E7124",
        E7125 = "E7125",
        E7126 = "E7126",
        E7127 = "E7127",
        E7128 = "E7128",
        E7129 = "E7129",
        E7130 = "E7130",
        E7131 = "E7131",
        E7132 = "E7132",
        E7133 = "E7133",
        E7134 = "E7134",
        E7135 = "E7135",
        E7200 = "E7200",
        E7201 = "E7201",
        E7202 = "E7202",
        E7203 = "E7203",
        E7204 = "E7204",
        E7205 = "E7205",
        E7206 = "E7206",
        E7207 = "E7207",
        E7208 = "E7208",
        E7209 = "E7209",
        E7210 = "E7210",
        E7211 = "E7211",
        E7212 = "E7212",
        E7213 = "E7213",
        E7214 = "E7214",
        E7215 = "E7215",
        E7216 = "E7216",
        E7217 = "E7217",
        E7218 = "E7218",
        E7219 = "E7219",
        E7220 = "E7220",
        E7221 = "E7221",
        E7222 = "E7222",
        E7223 = "E7223",
        E7224 = "E7224",
        E7225 = "E7225",
        E7226 = "E7226",
        E7227 = "E7227",
        E7228 = "E7228",
        E7229 = "E7229",
        E7230 = "E7230",
        E7231 = "E7231",
        E7232 = "E7232",
        E7234 = "E7234",
        E7300 = "E7300",
        E7301 = "E7301",
        E7400 = "E7400",
        E7500 = "E7500",
        E7501 = "E7501",
        E7502 = "E7502",
        E7503 = "E7503",
        E7600 = "E7600",
        E7601 = "E7601",
        E7602 = "E7602",
        E7603 = "E7603",
        E7604 = "E7604",
        E7610 = "E7610",
        E7611 = "E7611",
        E7612 = "E7612",
        E7613 = "E7613",
        E7614 = "E7614",
        E7615 = "E7615",
        E7616 = "E7616",
        E7617 = "E7617",
        E7618 = "E7618",
        E7619 = "E7619",
        E7620 = "E7620",
        E7621 = "E7621",
        E7630 = "E7630",
        E7631 = "E7631",
        E7632 = "E7632",
        E7633 = "E7633",
        E7634 = "E7634",
        E7635 = "E7635",
        E7636 = "E7636",
        E7637 = "E7637",
        E7638 = "E7638",
        E7639 = "E7639",
        E7640 = "E7640",
        E7641 = "E7641",
        E7642 = "E7642",
        E7643 = "E7643",
        E7644 = "E7644",
        E7645 = "E7645",
        E7650 = "E7650",
        E7651 = "E7651",
        E7652 = "E7652",
        E7653 = "E7653",
        E7700 = "E7700",
        E7701 = "E7701",
        E7702 = "E7702",
        E7703 = "E7703",
        E7704 = "E7704",
        E7705 = "E7705",
        E7706 = "E7706",
        E7707 = "E7707",
        E7708 = "E7708",
        E7709 = "E7709",
        E7710 = "E7710",
        E7711 = "E7711",
        E7712 = "E7712",
    }

    export enum status {
        OK = "OK",
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
}

export type WebModule = {
    defaultAction: string
    description: string
    displayName: string
    icon: string
    name: string
    namespace: string
}
